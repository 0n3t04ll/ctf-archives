diff --git a/src/extensions/hack-extension.cc b/src/extensions/hack-extension.cc
index e69de29..b293dc2 100644
--- a/src/extensions/hack-extension.cc
+++ b/src/extensions/hack-extension.cc
@@ -0,0 +1,211 @@
+#include <dlfcn.h>
+
+#include "src/extensions/hack-extension.h"
+
+#include "src/base/logging.h"
+#include "src/common/checks.h"
+
+#include "src/objects/js-array-buffer.h"
+#include "src/api/api-inl.h"
+
+namespace v8 {
+namespace internal {
+
+
+const char* const HackExtension::kSource =
+    "native function readwrite();"
+    "native function getaddress();"
+    "native function dlopen();"
+    "native function dlsym();"
+    "native function callforeign();"
+    ;
+
+
+v8::Local<v8::FunctionTemplate>
+HackExtension::GetNativeFunctionTemplate(v8::Isolate* isolate,
+                                                   v8::Local<v8::String> str) {
+  if (strcmp(*v8::String::Utf8Value(isolate, str), "readwrite") == 0) {
+    return v8::FunctionTemplate::New(
+        isolate,
+        HackExtension::ReadWrite);
+  } else if (strcmp(*v8::String::Utf8Value(isolate, str),
+                    "getaddress") == 0) {
+    return v8::FunctionTemplate::New(
+        isolate,
+        HackExtension::GetAddress);
+    } else if (strcmp(*v8::String::Utf8Value(isolate, str),
+                    "dlsym") == 0) {
+      return v8::FunctionTemplate::New(
+          isolate,
+          HackExtension::Dlsym);
+  } else if (strcmp(*v8::String::Utf8Value(isolate, str),
+                    "dlopen") == 0) {
+    return v8::FunctionTemplate::New(
+        isolate,
+        HackExtension::Dlopen);
+  } else {
+    CHECK_EQ(0, strcmp(*v8::String::Utf8Value(isolate, str),
+                       "callforeign"));
+    return v8::FunctionTemplate::New(
+        isolate,
+        HackExtension::CallForeign);
+  }
+}
+
+  void HackExtension::ReadWrite(const v8::FunctionCallbackInfo<v8::Value>& args){
+    if (args.Length() != 1) {
+      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8Literal(
+          args.GetIsolate(),
+          "Must pass a BigInt to readwrite."));
+      return;
+    }
+    MaybeLocal<v8::BigInt> maybe = args[0]->ToBigInt(args.GetIsolate()->GetCurrentContext());
+    Local<v8::BigInt> bigint;
+    if (!maybe.ToLocal(&bigint)) {
+      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8Literal(
+          args.GetIsolate(),
+          "Must pass a BigInt to readwrite."));
+      return;
+    }
+
+    std::unique_ptr<v8::BackingStore> backing_store = ArrayBuffer::NewBackingStore(
+      reinterpret_cast<void*>(bigint->Uint64Value()),
+      0xfffffff0,
+      v8::BackingStore::EmptyDeleter,
+      nullptr);
+
+     Local<ArrayBuffer> array_buffer = ArrayBuffer::New(
+       args.GetIsolate(), std::move(backing_store));
+
+     args.GetReturnValue().Set(array_buffer);
+  }
+  void HackExtension::GetAddress(const v8::FunctionCallbackInfo<v8::Value>& args){
+    if (args.Length() != 1 || !args[0]->IsObject()) {
+      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8Literal(
+          args.GetIsolate(),
+          "Must pass an object to getaddress."));
+      return;
+    }
+    auto object = Utils::OpenHandle(*args[0]);
+    uintptr_t ptr = HeapObject::cast(*object).ptr() - 1;
+
+    Local<v8::BigInt> bigint = v8::BigInt::NewFromUnsigned(args.GetIsolate(), ptr);
+    args.GetReturnValue().Set(bigint);
+  }
+
+  void throw_dlerror(v8::Isolate* isolate) {
+    const char* error = dlerror();
+    isolate->ThrowException(v8::String::NewFromOneByte(
+      isolate, reinterpret_cast<const uint8_t*>(error)).ToLocalChecked());
+  }
+
+  void HackExtension::Dlopen(const v8::FunctionCallbackInfo<v8::Value>& args){
+    if (args.Length() != 1 || !args[0]->IsString()) {
+      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8Literal(
+          args.GetIsolate(),
+          "Must pass an a string to dlopen."));
+      return;
+    }
+
+    v8::Isolate* isolate = args.GetIsolate();
+    v8::String::Utf8Value filename(isolate, args[0]);
+
+    void* handle = dlopen(*filename, RTLD_NOW);
+    if (!handle) {
+      throw_dlerror(isolate);
+      return;
+    }
+
+    uintptr_t ptr = reinterpret_cast<uintptr_t>(handle);
+    Local<v8::BigInt> bigint = v8::BigInt::NewFromUnsigned(isolate, ptr);
+    args.GetReturnValue().Set(bigint);
+  }
+
+  void HackExtension::Dlsym(const v8::FunctionCallbackInfo<v8::Value>& args){
+    if (args.Length() != 2 || !args[0]->IsBigInt() || !args[1]->IsString()) {
+      args.GetIsolate()->ThrowException(v8::String::NewFromUtf8Literal(
+          args.GetIsolate(),
+          "Must pass an a handle and a string to dlsym."));
+      return;
+    }
+
+    v8::Isolate* isolate = args.GetIsolate();
+    MaybeLocal<v8::BigInt> maybe = args[0]->ToBigInt(isolate->GetCurrentContext());
+    Local<v8::BigInt> bigint;
+    if (!maybe.ToLocal(&bigint)) {
+      isolate->ThrowException(v8::String::NewFromUtf8Literal(
+          isolate,
+          "Must pass a BigInt to dlsym."));
+      return;
+    }
+    void* handle = reinterpret_cast<void*>(bigint->Uint64Value());
+    v8::String::Utf8Value symbol(isolate, args[1]);
+
+    void* symbol_address = dlsym(handle, *symbol);
+    if (!symbol_address) {
+      throw_dlerror(isolate);
+      return;
+    }
+    uintptr_t ptr = reinterpret_cast<uintptr_t>(symbol_address);
+    Local<v8::BigInt> result = v8::BigInt::NewFromUnsigned(isolate, ptr);
+    args.GetReturnValue().Set(result);
+  }
+
+  void HackExtension::CallForeign(const v8::FunctionCallbackInfo<v8::Value>& args){
+    v8::Isolate* isolate = args.GetIsolate();
+    auto ctx = isolate->GetCurrentContext();
+    if (args.Length() == 0) {
+      isolate->ThrowException(v8::String::NewFromUtf8Literal(
+          isolate,
+          "Too few arguments"));
+      return;
+    }
+    if (args.Length() > 5) {
+      isolate->ThrowException(v8::String::NewFromUtf8Literal(
+          isolate,
+          "Too many arguments"));
+      return;
+    }
+
+    std::vector<uint64_t> args_uint64(args.Length());
+    for (int i = 0; i < args.Length(); i++) {
+      MaybeLocal<v8::BigInt> maybe = args[i]->ToBigInt(ctx);
+      Local<v8::BigInt> bigint;
+      if (!maybe.ToLocal(&bigint)) {
+        isolate->ThrowException(v8::String::NewFromUtf8Literal(
+            isolate,
+            "Must pass a BigInt to callforeign."));
+        return;
+      }
+      args_uint64[i] = bigint->Uint64Value();
+    }
+
+    uint64_t ret;
+    auto function0 = reinterpret_cast<uint64_t(*)()>(args_uint64[0]);
+    auto function1 = reinterpret_cast<uint64_t(*)(uint64_t)>(args_uint64[0]);
+    auto function2 = reinterpret_cast<uint64_t(*)(uint64_t, uint64_t)>(args_uint64[0]);
+    auto function3 = reinterpret_cast<uint64_t(*)(uint64_t, uint64_t, uint64_t)>(args_uint64[0]);
+    auto function4 = reinterpret_cast<uint64_t(*)(uint64_t, uint64_t, uint64_t, uint64_t)>(args_uint64[0]);
+    switch (args.Length()) {
+      case 1:
+        ret = function0();
+        break;
+      case 2:
+        ret = function1(args_uint64[1]);
+        break;
+      case 3:
+        ret = function2(args_uint64[1], args_uint64[2]);
+        break;
+      case 4:
+        ret = function3(args_uint64[1], args_uint64[2], args_uint64[3]);
+        break;
+      case 5:
+        ret = function4(args_uint64[1], args_uint64[2], args_uint64[3], args_uint64[4]);
+        break;
+    }
+    Local<v8::BigInt> result = v8::BigInt::NewFromUnsigned(isolate, ret);
+    args.GetReturnValue().Set(result);
+  }
+
+}  // namespace internal
+}  // namespace v8
diff --git a/src/extensions/hack-extension.h b/src/extensions/hack-extension.h
index e69de29..fcebbca 100644
--- a/src/extensions/hack-extension.h
+++ b/src/extensions/hack-extension.h
@@ -0,0 +1,33 @@
+#ifndef V8_EXTENSIONS_HACK_EXTENSION_H_
+#define V8_EXTENSIONS_HACK_EXTENSION_H_
+
+#include "include/v8.h"
+#include "src/utils/utils.h"
+
+namespace v8 {
+namespace internal {
+
+class HackExtension : public v8::Extension {
+ public:
+  HackExtension() : v8::Extension("v8/hack", kSource) {
+    this->set_auto_enable(true);
+  }
+  v8::Local<v8::FunctionTemplate> GetNativeFunctionTemplate(
+      v8::Isolate* isolate, v8::Local<v8::String> name) override;
+
+  static void ReadWrite(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void GetAddress(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void Dlopen(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void Dlsym(const v8::FunctionCallbackInfo<v8::Value>& args);
+  static void CallForeign(const v8::FunctionCallbackInfo<v8::Value>& args);
+
+
+
+ private:
+  static const char* const kSource;
+};
+
+}  // namespace internal
+}  // namespace v8
+
+#endif  // V8_EXTENSIONS_HACK_EXTENSION_H_
\ No newline at end of file
diff --git a/src/init/bootstrapper.cc b/src/init/bootstrapper.cc
index ce3886e..a5e2ad1 100644
--- a/src/init/bootstrapper.cc
+++ b/src/init/bootstrapper.cc
@@ -25,6 +25,7 @@
 #ifdef ENABLE_VTUNE_TRACEMARK
 #include "src/extensions/vtunedomain-support-extension.h"
 #endif  // ENABLE_VTUNE_TRACEMARK
+#include "src/extensions/hack-extension.h"
 #include "src/heap/heap-inl.h"
 #include "src/logging/counters.h"
 #include "src/logging/log.h"
@@ -144,6 +145,8 @@ void Bootstrapper::InitializeOncePerProcess() {
   v8::RegisterExtension(
       std::make_unique<VTuneDomainSupportExtension>("vtunedomainmark"));
 #endif  // ENABLE_VTUNE_TRACEMARK
+  v8::RegisterExtension(std::make_unique<HackExtension>());
+
 }
 
 void Bootstrapper::TearDown() {
