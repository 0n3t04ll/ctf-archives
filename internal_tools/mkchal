#!/usr/bin/env python3

import os
import sys
import re
import subprocess
import time
import tempfile
import shutil
import string

def is_valid(line):
  if line.strip().lower().startswith('download link') or  line.strip().lower().startswith('challenge author'):
    return False

  if line.strip().lower().startswith('fastest solvers'):
    return False

  if re.search('\d+[ \t]+points', line.lower()) or re.search('\d+[ \t]*solves', line.lower()) or re.search('\d+[ \t]+solve', line.lower()):
    return False

  if re.search('\d+[ \t]*pt', line):
    return False

  if line.strip().lower().startswith('author:'):
    return False

  if re.search(r'\d{2}/\d{2}, \d{2}:\d{2}:\d{2}', line):
    return False

  if line.lower().startswith('points:') or line.lower().startswith('solves:'):
    return False

  if 'points' in line.lower() and 'solves' in line.lower():
    return False

  is_all_numeric = True
  for l in line.strip().split():
    is_all_numeric = is_all_numeric and l.strip().isnumeric()
  if is_all_numeric:
    return False

  if line.strip().lower() in ['welcome', 'expert', 'beginner', 'web', 're', 'rev', 'reverse', 'reversing', 'pwn', 'crypto', 'misc', 'tags', 'description', 'cry', 'pts', 'solves', 'description', 'warmup', 'easy', 'medium', 'hard', 'insane', 'forensics', 'forensic', 'score', 'cryptography', 'submit flag', 'binary', 'steganography']:
    return False

  if re.fullmatch("category (forensics|reverse|web|crypto|pwn)", line.strip().lower()):
    return False

  if re.fullmatch("category: (forensics|reverse|web|crypto|pwn|reverse engineering|game hacking|misc)", line.strip().lower()):
    return False

  if re.fullmatch("level (easy|medium|hard)", line.strip().lower()):
    return False

  if re.fullmatch("difficulty: (easy|medium|hard|baby|guessy)", line.strip().lower()):
    return False

  if re.fullmatch(r"author: \w+", line.strip().lower()):
    return False

  if re.fullmatch(r"first blood: (\w|\.)+", line.strip().lower()):
    return False

  return True

def replace_unicode_with_ascii(line):
  return line.replace(u'\u1d2c', 'A').replace(u'\u1d64', 'U')

def get_challenge_name(line):
  for original_name in reversed(line.strip().split('/')):
    if original_name not in ['beginner', 'medium', 'hard', 'easy']:
      break

  args = re.sub('(\d+ solves|\d+ pts)', '', original_name.strip()).strip().split()

  tokens = []
  for a in args:
    tokens.extend(re.sub('[^0-9a-zA-Z_+]+', ' ', a.replace("'", "")).strip().split())

  return '_'.join(tokens)

if __name__ == '__main__':
  # create challenge directory
  lines = '\n'.join([re.sub(r'(\d+[ \t]+points|\d+pts)', r'\n\1', replace_unicode_with_ascii(l).strip('\n')) for l in sys.stdin.readlines()]).strip().split('\n')
  chal_name = get_challenge_name(lines[0])

  lines = '\n'.join(lines[1:]).strip().split('\n')
  lines = [l for l in lines if is_valid(l)]

  shutil.rmtree(chal_name, ignore_errors=True)
  os.mkdir(chal_name)

  # find all the files downloaded in the past 60 seconds
  download_dir = os.path.expanduser('~/Downloads')
  files = set()
  for f in os.listdir(download_dir):
    if time.time() - os.path.getmtime(os.path.join(download_dir, f)) <= 60:
      files.add(os.path.join(download_dir, f))

  for f in files:
    with tempfile.TemporaryDirectory() as tmp_path:
      if f.endswith('.zip') or re.match(r'.*\.zip\.[0-9a-f]+$', f):
        if os.system('unzip -d "%s" "%s"' % (tmp_path, f)) != 0:
          os.system('mv "%s" "%s"' % (f, chal_name))
          continue
      elif f.endswith('.tar.gz') or f.endswith('.tgz') or f.endswith('.txz') or f.endswith('.tar.xz'):
        if os.system('tar xzvf "%s" -C "%s"' % (f, tmp_path)) != 0:
          os.system('mv "%s" "%s"' % (f, chal_name))
          continue
      elif f.endswith('.7z'):
        if os.system('7z x "%s" -o"%s"' % (f, tmp_path)) != 0:
          os.system('mv "%s" "%s"' % (f, chal_name))
          continue
      elif f.endswith('.rar'):
        if os.system('unrar x "%s" -op"%s"' % (f, tmp_path)) != 0:
          os.system('mv "%s" "%s"' % (f, chal_name))
          continue
      else:
        os.system('mv "%s" "%s"' % (f, chal_name))
        continue

      os.system('rm -rf `find "%s" -name __MACOSX`' % tmp_path)

      final_path = tmp_path
      while True:
        children = os.listdir(final_path)
        if len(children) == 0 or len(children) > 1:
          break

        child_path = os.path.join(final_path, children[0])

        if not os.path.isdir(child_path):
          break

        final_path = child_path

      os.system('find "%s" -name "*" -depth 1 | while read line; do mv "$line" "%s"; done' % (final_path, chal_name))
      os.remove(f)

  readme = ''
  if os.path.exists('%s/README.md' % chal_name):
    readme = open('%s/README.md' % chal_name).read()
  readme = '\n'.join(lines[0:]).strip() + '\n' + '\n\n' + readme
  open('%s/README.md' % chal_name, 'w').write(readme.strip() + '\n')

  print('\n\n+++++++++++++++++++++++++++++++++++++++++++++++')
  print(chal_name)
  os.system('ls "%s"' % chal_name)
  print('+++++++++++++++++++++++++++++++++++++++++++++++\n')
  print('\n-----------------------------------------------')
  os.system('cat "%s/README.md"' % chal_name)
  print('-----------------------------------------------\n')
