#!/usr/bin/env python3

import os
import sys
import re
import subprocess
import time
import tempfile
import shutil
import string
import glob
from pathlib import Path

def is_valid(line):
  if line.lower() in ['source dockerfile', 'files', 'challenge', 'challenge.py']:
    return False

  if len(line.strip()) == 0:
    return True

  if line.strip().lower().startswith('flag format:'):
    return False

  if line.strip().lower() == 'attachment':
    return False

  if line.strip().lower().startswith('download link'):
    return False

  if line.strip().lower().startswith('fastest solvers'):
    return False

  if re.search('solves\s+\d+', line.lower()):
    return False

  if re.search('score:\s*\d+', line.lower()):
    return False

  if re.search('\d+[ \t]+points', line.lower()) or re.search('\d+[ \t]*solves', line.lower()) or re.search('\d+[ \t]+solve', line.lower()) or re.search('\d+[ \t]+score', line.lower()):
    return False

  if re.fullmatch("[0-9a-z-]+\.zip", line.strip().lower()):
    return False

  if re.fullmatch("attachment:\s*[\w\.]+", line.strip().lower()):
    return False

  if re.search('\d+[ \t]*pt', line):
    return False

  if re.search(r'\d{2}/\d{2}, \d{2}:\d{2}:\d{2}', line):
    return False

  if line.lower().startswith('points:') or line.lower().startswith('solves:') or line.lower().startswith('topics:'):
    return False

  if 'points' in line.lower() and 'solves' in line.lower():
    return False

  is_all_numeric = True
  for l in line.strip().split():
    is_all_numeric = is_all_numeric and l.strip().isnumeric()
  if is_all_numeric:
    return False

  if line.strip().lower() in [
    'welcome', 'expert', 'beginner', 'web', 're', 'rev', 'reverse', 'reversing', 'pwn', 'crypto', 'misc', 'tags', 'description', 'cry', 'pts', 'solves', 'description', 'warmup', 'easy', 'medium', 'hard', 'insane', 'forensics', 'forensic', 'score', 'cryptography', 'submit flag', 'binary', 'steganography', 'unrated', 'reverse engineering', 'task', 'information', 'insights', 'read this carrefully because sometimes the author might leave hints.', 'download files', 'play challenge', 'problem', 'previous submissions', 'download', 'admin bot', 'website', 'pwning',
    'misc icon', 'crypto icon', 'pwn icon', 'reversing icon', 'web icon', 'steg', 'stego'
  ]:
    return False

  if re.fullmatch("category (forensics|reverse|web|crypto|pwn)", line.strip().lower()):
    return False

  if re.fullmatch("category: (forensics|reverse|web|crypto|pwn|reverse engineering|game hacking|misc)", line.strip().lower()):
    return False

  if re.fullmatch("level (easy|medium|hard)", line.strip().lower()):
    return False

  if re.fullmatch("difficulty: (easy|medium|hard|baby|guessy)", line.strip().lower()):
    return False

  if re.fullmatch(r"first blood: (\w|\.)+", line.strip().lower()):
    return False

  if re.fullmatch(r"(http|https)://\d+\.\d+\.\d+\.\d+/", line.strip().lower()):
    return False

  if re.fullmatch(r"\d+\.\d+\.\d+\.\d+:\d+", line.strip().lower()):
    return False

  if re.fullmatch(r"nc \d+\.\d+\.\d+\.\d+ \d+", line.strip().lower()):
    return False

  if re.fullmatch(r"nc [a-z0-9\-_]{1,63}(\.[a-z0-9-_]{1,63})+ \d+", line.strip().lower()):
    return False

  if re.fullmatch(r"\d{1,2}/\d{1,2}/\d{4}", line.strip().lower()):
    return False

  return True

def replace_special_characters(line):
  return line.replace(u'\u1d2c', 'A').replace(u'\u1d64', 'U').replace(u'\u00e4', 'a').replace('@', 'a').replace('$', 's').replace('&', 'and').replace('üëª', 'Ghost').replace('√®', 'e').replace('üèÉ', 'Ran').replace('√©', 'e').replace('√∂', 'o').replace('√â', 'E').replace('‡¥ï‡µÅ‡¥ü‡µç‡¥ü‡¥ø', 'child').replace('‚õ≥', 'flag').replace('<3', 'heart').replace('üêç', 'snake').replace('√•', 'a').replace('√Ö', 'A').replace('ùë™', 'C').replace('ùë∑', 'P').replace('Œµ', 'e')

def get_challenge_name(line):
  for original_name in reversed(line.strip('|').strip().split('/')):
    if original_name not in ['beginner', 'medium', 'hard', 'easy']:
      break

  args = re.sub(r'(\d+ solves|\d+ pts$)', '', original_name.strip()).strip()
  args = re.sub(r'\(\d+ pts\)', '', args).strip()
  args = re.sub(r'\(solved by \d+ team(s)?\)$', '', args).strip()
  args = re.sub(r'\b\d+$', '', args).strip()
  args = re.sub('(misc|crypto|rev|web|pwn)$', '', args).strip()
  args = args.split()

  tokens = []
  for a in args:
    tokens.extend(re.sub(r'[^0-9a-zA-Z_+\.]+', ' ', a.replace("'", "")).strip().split())

  return '_'.join(tokens)

if __name__ == '__main__':
  # create challenge directory
  lines = '\n'.join([re.sub(r'(\d+[ \t]+points|\d+pts)', r'\n\1', l.rstrip()) for l in sys.stdin.readlines()]).strip().split('\n')
  chal_name = get_challenge_name(replace_special_characters(lines[0]))

  lines = '\n'.join(lines[1:]).strip().split('\n')
  lines = [re.sub(r"nc [a-z0-9\-_]{1,63}(\.[a-z0-9-_]{1,63})+ \d+", '', l) for l in lines]
  lines = [l.strip('|') for l in lines]
  lines = [l.strip('\n') for l in lines if is_valid(l)]

  shutil.rmtree(chal_name, ignore_errors=True)
  os.mkdir(chal_name)

  download_dir = os.path.expanduser('~/Downloads')

  # move all the files downloaded in the past 60 seconds into the chal directory
  for f in os.listdir(download_dir):
    fname = os.path.join(download_dir, f)

    if time.time() - os.path.getmtime(fname) <= 300:
      subprocess.run(['mv', fname, chal_name])

  # compress any pcap or pcapng file
  os.system("find \"%s\" -type f -name \"*.pcap*\" | grep -E -e '.*\.pcap(ng){0,1}$' | xargs -n 1 xz" % (chal_name))
  # compress any wav file
  os.system("find \"%s\" -type f -name \"*.wav\" | grep -E -e '.*\.wav$' | xargs -n 1 xz" % (chal_name))

  readme = ''
  if os.path.exists('%s/README.md' % chal_name):
    readme = open('%s/README.md' % chal_name).read()
  readme = re.sub('\n{3,}', '\n\n', '\n'.join(lines[0:]).strip()) + '\n' + '\n\n' + readme
  open('%s/README.md' % chal_name, 'w').write(readme.strip() + '\n')

  print('\n\n+++++++++++++++++++++++++++++++++++++++++++++++')
  print(chal_name)
  subprocess.run(['ls', chal_name])
  print('+++++++++++++++++++++++++++++++++++++++++++++++\n')
  print('\n-----------------------------------------------')
  subprocess.run(['cat', chal_name + '/README.md'])
  print('-----------------------------------------------\n')
