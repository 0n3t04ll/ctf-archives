#!/usr/bin/env python3

import os
import sys
import re
import subprocess
import time
import tempfile
import shutil
import string
import glob
from pathlib import Path
import argparse

def is_valid(line):
  try:
    int(line.strip())
    return False
  except:
    pass

  if re.match(r'-+', line):
    return False

  if line.strip().lower() == 'click':
    return False

  if re.search(r'^https?://', line.lower()) and 'renater.fr' not in line.lower() and 'drive.google.com' not in line.lower() and 'amazonaws.com' not in line.lower() and 'youtube.com' not in line.lower() and 'docs.google.com' not in line.lower() and 'mega.nz' not in line.lower() and 'googleapis.com' not in line.lower() and 'github.com' not in line.lower():
    return False

  if line.strip().lower() == 'ja / en':
    return False

  if line.lower() in ['source dockerfile', 'files', 'challenge', 'challenge.py', 'download image', 'download file', 'challenge description', 'feed my friend.', 'this challenge has online instance', 'attachments:', 'category:']:
    return False

  if len(line.strip()) == 0:
    return True

  if line.strip().lower() in ['attachment', 'handouts', 'show tags', 'download attachments', 'link to open instance']:
    return False

  if 'Dear PersianCats' in line.strip():
    return False

  if line.strip().startswith('To: PersianCats'):
    return False

  if line.strip().lower().startswith('reward:'):
    return False

  if line.strip().lower().startswith('download link'):
    return False

  if line.strip().lower().startswith('$ socat '):
    return False

  if line.strip().lower().startswith('$ ncat '):
    return False

  if line.strip().lower().startswith('instancer url:') or line.strip().lower().startswith('challenge url:'):
    return False

  if line.strip().lower().startswith('fastest solvers'):
    return False

  if re.search(r'^url\s+:', line.lower()):
    return False

  if re.search(r'^bot\s+:', line.lower()):
    return False

  if line.strip().lower().startswith('> deploy on'):
    return False

  if re.search(r'solves\s+\d+', line.lower()):
    return False

  if re.search(r'score:\s*\d+', line.lower()):
    return False

  if re.search(r'download (image|file|pcap) \([\d\.]+(kb|mb|b)\)', line.lower()):
    return False

  if re.search(r'\d+[ \t]+points', line.lower()) or re.search(r'\d+[ \t]*solves', line.lower()) or re.search(r'\d+[ \t]+solve', line.lower()) or re.search(r'\d+[ \t]+score', line.lower()) or re.search(r'\d+[ \t]+sold', line.lower()) or re.search(r'\$[ \t]+\d+', line.lower()):
    return False

  if re.fullmatch(r"[0-9a-z-]+\.zip", line.strip().lower()):
    return False

  if re.fullmatch(r"attachment:\s*[\w\.]+", line.strip().lower()):
    return False

  if re.search(r'\d+[ \t]*pt', line):
    return False

  if re.search(r'\d{2}/\d{2}, \d{2}:\d{2}:\d{2}', line):
    return False

  if line.lower().startswith('points:') or line.lower().startswith('solves:') or line.lower().startswith('topics:') or line.lower().startswith('task points') or line.lower().startswith('my score') or line.lower().startswith('difficulty estimate:'):
    return False

  if 'points' in line.lower() and 'solves' in line.lower():
    return False

  if line.lower().startswith('solved by'):
    return False

  is_all_numeric = True
  for l in line.strip().split():
    is_all_numeric = is_all_numeric and l.strip().isnumeric()
  if is_all_numeric:
    return False

  if line.strip().lower() in [
    'welcome', 'expert', 'beginner', 'web', 're', 'rev', 'reverse', 'reversing', 'pwn', 'crypto', 'misc', 'tags', 'description', 'cry', 'pts', 'solves', 'description', 'warmup', 'easy', 'medium', 'hard', 'insane', 'forensics', 'forensic', 'score', 'cryptography', 'submit flag', 'binary', 'steganography', 'unrated', 'reverse engineering', 'task', 'information', 'insights', 'read this carrefully because sometimes the author might leave hints.', 'download files', 'play challenge', 'problem', 'previous submissions', 'download', 'admin bot', 'website', 'pwning',
    'misc icon', 'crypto icon', 'pwn icon', 'reversing icon', 'web icon', 'steg', 'stego', 'introduction', 'for sale', 'miscellaneous',
    'total solves', 'author'
  ]:
    return False

  if re.fullmatch("category (forensics|reverse|web|crypto|pwn)", line.strip().lower()):
    return False

  if re.fullmatch("category: (forensics|reverse|web|crypto|pwn|reverse engineering|game hacking|misc)", line.strip().lower()):
    return False

  if re.fullmatch("level (easy|medium|hard)", line.strip().lower()):
    return False

  if re.fullmatch("difficulty: (easy|medium|hard|baby|guessy|elite)", line.strip().lower()):
    return False

  if re.fullmatch(r"first blood: (\w|\.)+", line.strip().lower()):
    return False

  if re.fullmatch(r"challenge id: #\d+", line.strip().lower()):
    return False

  if re.fullmatch(r"\d+:\d+:\d+", line.strip().lower()):
    return False

  if re.fullmatch(r"(http|https)://\d+\.\d+\.\d+\.\d+/", line.strip().lower()):
    return False

  if re.fullmatch(r"\d+\.\d+\.\d+\.\d+:\d+", line.strip().lower()):
    return False

  if re.fullmatch(r"nc \d+\.\d+\.\d+\.\d+ \d+", line.strip().lower()):
    return False

  if re.fullmatch(r"nc [a-z0-9\-_]{1,63}(\.[a-z0-9-_]{1,63})+ \d+", line.strip().lower()):
    return False

  if re.fullmatch(r"ncat --ssl [a-z0-9\-_]{1,63}(\.[a-z0-9-_]{1,63})+ \d+", line.strip().lower()):
    return False

  if re.fullmatch(r"\d{1,2}/\d{1,2}/\d{4}", line.strip().lower()):
    return False

  if re.fullmatch(r'\d+ pts', line.strip().lower()):
    return False

  return True

def replace_special_characters(line):
  return line.replace(u'\u1d2c', 'A').replace(u'\u1d64', 'U').replace(u'\u00e4', 'a').replace('@', 'a').replace('$', 's').replace('&', 'and').replace('üëª', 'Ghost').replace('√®', 'e').replace('üèÉ', 'Ran').replace('√©', 'e').replace('√∂', 'o').replace('√â', 'E').replace('‡¥ï‡µÅ‡¥ü‡µç‡¥ü‡¥ø', 'child').replace('‚õ≥', 'flag').replace('<3', 'heart').replace('üêç', 'snake').replace('√•', 'a').replace('√Ö', 'A').replace('ùë™', 'C').replace('ùë∑', 'P').replace('Œµ', 'e').replace('‚àö', 'sqrt').replace('üÖ±Ô∏è', 'B').replace('≈õ', 's').replace('ƒô', 'e').replace('Œî', 'A').replace('œÇ', 'C').replace('!', 'i').replace('¬≤', '2').replace('√±', 'n').replace('üê∫', 'wolf').replace('œÄ', 'pi').replace('√∏', 'o')

def get_challenge_name(line):
  args = re.sub(r'(score:|solves:)\s+\d+', '', line.strip(), flags=re.IGNORECASE).strip()
  args = re.sub(r'^(crypto|jail|misc|pwn|rev|web)/', '', args, flags=re.IGNORECASE).strip()
  args = re.sub(r'\(solved by \d+ team(s?)\)\d+', '', args, flags=re.IGNORECASE).strip()
  args = re.sub(r'(\d+\s+solves|\d+\s+pts)', '', args.strip(), flags=re.IGNORECASE).strip()
  args = re.sub(r'\(\d+ pts\)', '', args, flags=re.IGNORECASE).strip()
  args = re.sub(r'\(\d+\)$', '', args, flags=re.IGNORECASE).strip()
  args = re.sub(r'\(solved by \d+ team(s)?\)$', '', args, flags=re.IGNORECASE).strip()
  args = re.sub('^(misc|crypto|rev|web|pwn)$', '', args).strip()
  args = args.split()

  tokens = []
  for a in args:
    tokens.extend(re.sub(r'[^0-9a-zA-Z_+\.]+', ' ', a.replace("'", "")).strip().split())

  return '_'.join(tokens)

def get_clipboard():
  return subprocess.check_output('pbpaste', shell=True).decode()

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('--input', type=str, choices=['stdin', 'clipboard'], default='clipboard')
  args = parser.parse_args()

  # create challenge directory
  chall_content = get_clipboard().split('\n') if args.input == 'clipboard' else sys.stdin.readlines()
  lines = '\n'.join([re.sub(r'(\d+[ \t]+points|\d+pts)', r'\n\1', l.rstrip()) for l in chall_content]).strip().split('\n')
  chal_name = get_challenge_name(replace_special_characters(lines[0]))

  lines = '\n'.join(lines[1:]).strip().split('\n')
  lines = [re.sub(r"nc [a-z0-9\-_]{1,63}(\.[a-z0-9-_]{1,63})+ \d+", '', l) for l in lines]
  lines = [l.strip('|') for l in lines]
  lines = [l.strip('\n') for l in lines if is_valid(l)]

  shutil.rmtree(chal_name, ignore_errors=True)
  os.mkdir(chal_name)

  download_dir = os.path.expanduser('~/Downloads')

  # move all the files downloaded in the past 60 seconds into the chal directory
  attachments = set()
  for f in os.listdir(download_dir):
    attachments.add(f)
    fname = os.path.join(download_dir, f)

    if time.time() - os.path.getmtime(fname) <= 300:
      subprocess.run(['mv', fname, chal_name])

  lines = [l for l in lines if l not in attachments]

  # compress big files
  for file_ext in ['pcap', 'pcapng', 'wav', 'mp3', 'mov', 'mp4', 'log', 'exe', 'qcow2', 'img']:
    os.system(f"""find "{chal_name}" -type f -name "*.{file_ext}" | xargs -n 1 xz""")

  readme = ''
  if os.path.exists('%s/README.md' % chal_name):
    readme = open('%s/README.md' % chal_name).read()
  readme = re.sub('\n{3,}', '\n\n', '\n'.join(lines[0:]).strip()) + '\n' + '\n\n' + readme
  open('%s/README.md' % chal_name, 'w').write(readme.strip() + '\n')

  print('\n\n+++++++++++++++++++++++++++++++++++++++++++++++')
  print(chal_name)
  subprocess.run(['ls', '-lh', chal_name])
  print('+++++++++++++++++++++++++++++++++++++++++++++++\n')
  print('\n-----------------------------------------------')
  subprocess.run(['cat', chal_name + '/README.md'])
  print('-----------------------------------------------\n')
  subprocess.run(['ls', '-tr'])
