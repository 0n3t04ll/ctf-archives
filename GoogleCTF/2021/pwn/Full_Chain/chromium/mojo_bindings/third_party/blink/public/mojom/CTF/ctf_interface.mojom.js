// third_party/blink/public/mojom/CTF/ctf_interface.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/CTF/ctf_interface.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');



  function CtfInterface_ResizeVector_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CtfInterface_ResizeVector_Params.prototype.initDefaults_ = function() {
    this.size = 0;
  };
  CtfInterface_ResizeVector_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CtfInterface_ResizeVector_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  CtfInterface_ResizeVector_Params.encodedSize = codec.kStructHeaderSize + 8;

  CtfInterface_ResizeVector_Params.decode = function(decoder) {
    var packed;
    var val = new CtfInterface_ResizeVector_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.size =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CtfInterface_ResizeVector_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CtfInterface_ResizeVector_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.size);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CtfInterface_ResizeVector_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CtfInterface_ResizeVector_ResponseParams.prototype.initDefaults_ = function() {
  };
  CtfInterface_ResizeVector_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CtfInterface_ResizeVector_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CtfInterface_ResizeVector_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  CtfInterface_ResizeVector_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CtfInterface_ResizeVector_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CtfInterface_ResizeVector_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CtfInterface_ResizeVector_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  function CtfInterface_Read_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CtfInterface_Read_Params.prototype.initDefaults_ = function() {
    this.offset = 0;
  };
  CtfInterface_Read_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CtfInterface_Read_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  CtfInterface_Read_Params.encodedSize = codec.kStructHeaderSize + 8;

  CtfInterface_Read_Params.decode = function(decoder) {
    var packed;
    var val = new CtfInterface_Read_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.offset =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CtfInterface_Read_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CtfInterface_Read_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint32, val.offset);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CtfInterface_Read_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CtfInterface_Read_ResponseParams.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  CtfInterface_Read_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CtfInterface_Read_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  CtfInterface_Read_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CtfInterface_Read_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CtfInterface_Read_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Double);
    return val;
  };

  CtfInterface_Read_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CtfInterface_Read_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.value);
  };
  function CtfInterface_Write_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CtfInterface_Write_Params.prototype.initDefaults_ = function() {
    this.value = 0;
    this.offset = 0;
  };
  CtfInterface_Write_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CtfInterface_Write_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;



    return validator.validationError.NONE;
  };

  CtfInterface_Write_Params.encodedSize = codec.kStructHeaderSize + 16;

  CtfInterface_Write_Params.decode = function(decoder) {
    var packed;
    var val = new CtfInterface_Write_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Double);
    val.offset =
        decoder.decodeStruct(codec.Uint32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  CtfInterface_Write_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CtfInterface_Write_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Double, val.value);
    encoder.encodeStruct(codec.Uint32, val.offset);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function CtfInterface_Write_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CtfInterface_Write_ResponseParams.prototype.initDefaults_ = function() {
  };
  CtfInterface_Write_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CtfInterface_Write_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CtfInterface_Write_ResponseParams.encodedSize = codec.kStructHeaderSize + 0;

  CtfInterface_Write_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CtfInterface_Write_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  CtfInterface_Write_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CtfInterface_Write_ResponseParams.encodedSize);
    encoder.writeUint32(0);
  };
  var kCtfInterface_ResizeVector_Name = 0;
  var kCtfInterface_Read_Name = 1;
  var kCtfInterface_Write_Name = 2;

  function CtfInterfacePtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CtfInterface,
                                                   handleOrPtrInfo);
  }

  function CtfInterfaceAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CtfInterface, associatedInterfacePtrInfo);
  }

  CtfInterfaceAssociatedPtr.prototype =
      Object.create(CtfInterfacePtr.prototype);
  CtfInterfaceAssociatedPtr.prototype.constructor =
      CtfInterfaceAssociatedPtr;

  function CtfInterfaceProxy(receiver) {
    this.receiver_ = receiver;
  }
  CtfInterfacePtr.prototype.resizeVector = function() {
    return CtfInterfaceProxy.prototype.resizeVector
        .apply(this.ptr.getProxy(), arguments);
  };

  CtfInterfaceProxy.prototype.resizeVector = function(size) {
    var params_ = new CtfInterface_ResizeVector_Params();
    params_.size = size;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCtfInterface_ResizeVector_Name,
          codec.align(CtfInterface_ResizeVector_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CtfInterface_ResizeVector_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CtfInterface_ResizeVector_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CtfInterfacePtr.prototype.read = function() {
    return CtfInterfaceProxy.prototype.read
        .apply(this.ptr.getProxy(), arguments);
  };

  CtfInterfaceProxy.prototype.read = function(offset) {
    var params_ = new CtfInterface_Read_Params();
    params_.offset = offset;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCtfInterface_Read_Name,
          codec.align(CtfInterface_Read_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CtfInterface_Read_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CtfInterface_Read_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CtfInterfacePtr.prototype.write = function() {
    return CtfInterfaceProxy.prototype.write
        .apply(this.ptr.getProxy(), arguments);
  };

  CtfInterfaceProxy.prototype.write = function(value, offset) {
    var params_ = new CtfInterface_Write_Params();
    params_.value = value;
    params_.offset = offset;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCtfInterface_Write_Name,
          codec.align(CtfInterface_Write_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CtfInterface_Write_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CtfInterface_Write_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function CtfInterfaceStub(delegate) {
    this.delegate_ = delegate;
  }
  CtfInterfaceStub.prototype.resizeVector = function(size) {
    return this.delegate_ && this.delegate_.resizeVector && this.delegate_.resizeVector(size);
  }
  CtfInterfaceStub.prototype.read = function(offset) {
    return this.delegate_ && this.delegate_.read && this.delegate_.read(offset);
  }
  CtfInterfaceStub.prototype.write = function(value, offset) {
    return this.delegate_ && this.delegate_.write && this.delegate_.write(value, offset);
  }

  CtfInterfaceStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  CtfInterfaceStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCtfInterface_ResizeVector_Name:
      var params = reader.decodeStruct(CtfInterface_ResizeVector_Params);
      this.resizeVector(params.size).then(function(response) {
        var responseParams =
            new CtfInterface_ResizeVector_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kCtfInterface_ResizeVector_Name,
            codec.align(CtfInterface_ResizeVector_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CtfInterface_ResizeVector_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCtfInterface_Read_Name:
      var params = reader.decodeStruct(CtfInterface_Read_Params);
      this.read(params.offset).then(function(response) {
        var responseParams =
            new CtfInterface_Read_ResponseParams();
        responseParams.value = response.value;
        var builder = new codec.MessageV1Builder(
            kCtfInterface_Read_Name,
            codec.align(CtfInterface_Read_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CtfInterface_Read_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCtfInterface_Write_Name:
      var params = reader.decodeStruct(CtfInterface_Write_Params);
      this.write(params.value, params.offset).then(function(response) {
        var responseParams =
            new CtfInterface_Write_ResponseParams();
        var builder = new codec.MessageV1Builder(
            kCtfInterface_Write_Name,
            codec.align(CtfInterface_Write_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CtfInterface_Write_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateCtfInterfaceRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCtfInterface_ResizeVector_Name:
        if (message.expectsResponse())
          paramsClass = CtfInterface_ResizeVector_Params;
      break;
      case kCtfInterface_Read_Name:
        if (message.expectsResponse())
          paramsClass = CtfInterface_Read_Params;
      break;
      case kCtfInterface_Write_Name:
        if (message.expectsResponse())
          paramsClass = CtfInterface_Write_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCtfInterfaceResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kCtfInterface_ResizeVector_Name:
        if (message.isResponse())
          paramsClass = CtfInterface_ResizeVector_ResponseParams;
        break;
      case kCtfInterface_Read_Name:
        if (message.isResponse())
          paramsClass = CtfInterface_Read_ResponseParams;
        break;
      case kCtfInterface_Write_Name:
        if (message.isResponse())
          paramsClass = CtfInterface_Write_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var CtfInterface = {
    name: 'blink.mojom.CtfInterface',
    kVersion: 0,
    ptrClass: CtfInterfacePtr,
    proxyClass: CtfInterfaceProxy,
    stubClass: CtfInterfaceStub,
    validateRequest: validateCtfInterfaceRequest,
    validateResponse: validateCtfInterfaceResponse,
  };
  CtfInterfaceStub.prototype.validator = validateCtfInterfaceRequest;
  CtfInterfaceProxy.prototype.validator = validateCtfInterfaceResponse;
  exports.CtfInterface = CtfInterface;
  exports.CtfInterfacePtr = CtfInterfacePtr;
  exports.CtfInterfaceAssociatedPtr = CtfInterfaceAssociatedPtr;
})();