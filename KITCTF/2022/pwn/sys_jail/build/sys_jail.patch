diff --git a/arch/x86/entry/syscalls/syscall_32.tbl b/arch/x86/entry/syscalls/syscall_32.tbl
index 320480a8db4f..2e156dfd9eae 100644
--- a/arch/x86/entry/syscalls/syscall_32.tbl
+++ b/arch/x86/entry/syscalls/syscall_32.tbl
@@ -455,3 +455,5 @@
 448	i386	process_mrelease	sys_process_mrelease
 449	i386	futex_waitv		sys_futex_waitv
 450	i386	set_mempolicy_home_node		sys_set_mempolicy_home_node
+451	i386	jail	sys_jail
+452	i386	jail_release	sys_jail_release
\ No newline at end of file
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index c84d12608cd2..7d6c8cf51f38 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -372,6 +372,8 @@
 448	common	process_mrelease	sys_process_mrelease
 449	common	futex_waitv		sys_futex_waitv
 450	common	set_mempolicy_home_node	sys_set_mempolicy_home_node
+451	common	jail	sys_jail
+452	common	jail_release	sys_jail_release
 
 #
 # Due to a historical design error, certain syscalls are numbered differently
diff --git a/fs/exec.c b/fs/exec.c
index a0b1f0337a62..e0817fcf7808 100644
--- a/fs/exec.c
+++ b/fs/exec.c
@@ -65,6 +65,10 @@
 #include <linux/syscall_user_dispatch.h>
 #include <linux/coredump.h>
 
+#include <linux/cred.h>
+#include <linux/random.h>
+#include <linux/uidgid.h>
+
 #include <linux/uaccess.h>
 #include <asm/mmu_context.h>
 #include <asm/tlb.h>
@@ -2060,6 +2064,55 @@ static int compat_do_execveat(int fd, struct filename *filename,
 }
 #endif
 
+
+int do_jail(struct jail_info *info) {
+	unsigned int uid;
+	unsigned long long token;
+	kuid_t kuid;
+	kgid_t kgid;
+	struct cred *new_cred;
+
+	uid = get_current_user()->uid.val;
+	token = 0;
+
+
+	if (info->requested_uid == -1) {
+		info->requested_uid = (get_random_u32() | 10000) & 0x7fff;
+	} else if (info->requested_uid < 10000 || info->requested_uid > 0x7fff) {
+		return -EPERM;
+	}
+
+	for (unsigned long long i = 0; i < 0xf; i++) {
+		// i don't trust get_random_u32(). use it to generate some real random bytes.
+		token ^= (((unsigned long long)get_random_u32()) << 32 | get_random_u32());
+	}
+
+	kuid = KUIDT_INIT(info->requested_uid);
+	kgid = KGIDT_INIT(info->requested_uid);
+
+	new_cred = prepare_creds();
+	if (new_cred == NULL) {
+		return -ENOMEM;
+	}
+
+	new_cred->uid = kuid;
+	new_cred->gid = kgid;
+	new_cred->euid = kuid;
+	new_cred->egid = kgid;
+	commit_creds(new_cred);
+
+	info->token = token;
+	info->requestor_uid = uid;
+
+	return 0;
+}
+
+int do_jail_release(unsigned long long token) {
+	// check the token and set the uid/gid to the original requestor_uid if the token matches
+	// TODO: implement this
+	return -EPERM;
+}
+
 void set_binfmt(struct linux_binfmt *new)
 {
 	struct mm_struct *mm = current->mm;
@@ -2103,6 +2156,16 @@ SYSCALL_DEFINE5(execveat,
 			   argv, envp, flags);
 }
 
+SYSCALL_DEFINE1(jail, struct jail_info *, info)
+{
+	return do_jail(info);
+}
+
+SYSCALL_DEFINE1(jail_release, unsigned long long, token)
+{
+	return do_jail_release(token);
+}
+
 #ifdef CONFIG_COMPAT
 COMPAT_SYSCALL_DEFINE3(execve, const char __user *, filename,
 	const compat_uptr_t __user *, argv,
diff --git a/include/linux/cred.h b/include/linux/cred.h
index 9ed9232af934..5e15ca6606c1 100644
--- a/include/linux/cred.h
+++ b/include/linux/cred.h
@@ -28,6 +28,15 @@ struct group_info {
 	kgid_t		gid[];
 } __randomize_layout;
 
+/*
+ * SYS_jail struct
+ */
+struct jail_info {
+	int requested_uid;
+	unsigned int requestor_uid;
+	unsigned long long token;
+};
+
 /**
  * get_group_info - Get a reference to a group info structure
  * @group_info: The group info to reference
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a34b0f9a9972..b74ef1f202eb 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -898,6 +898,9 @@ asmlinkage long sys_execve(const char __user *filename,
 		const char __user *const __user *argv,
 		const char __user *const __user *envp);
 
+asmlinkage long sys_jail(struct jail_info *info);
+asmlinkage long sys_jail_release(unsigned long long token);
+
 /* mm/fadvise.c */
 asmlinkage long sys_fadvise64_64(int fd, loff_t offset, loff_t len, int advice);
 
diff --git a/include/uapi/asm-generic/unistd.h b/include/uapi/asm-generic/unistd.h
index 45fa180cc56a..8a4373e02015 100644
--- a/include/uapi/asm-generic/unistd.h
+++ b/include/uapi/asm-generic/unistd.h
@@ -886,8 +886,14 @@ __SYSCALL(__NR_futex_waitv, sys_futex_waitv)
 #define __NR_set_mempolicy_home_node 450
 __SYSCALL(__NR_set_mempolicy_home_node, sys_set_mempolicy_home_node)
 
+#define __NR_jail 451
+__SYSCALL(__NR_jail, sys_jail)
+
+#define __NR_jail_release 452
+__SYSCALL(__NR_jail_release, sys_jail_release)
+
 #undef __NR_syscalls
-#define __NR_syscalls 451
+#define __NR_syscalls 453
 
 /*
  * 32 bit systems traditionally used different
diff --git a/kernel/sys_ni.c b/kernel/sys_ni.c
index 860b2dcf3ac4..3afe469095c0 100644
--- a/kernel/sys_ni.c
+++ b/kernel/sys_ni.c
@@ -343,6 +343,10 @@ COND_SYSCALL(bpf);
 /* execveat */
 COND_SYSCALL(execveat);
 
+COND_SYSCALL(jail);
+
+COND_SYSCALL(jail_release);
+
 COND_SYSCALL(userfaultfd);
 
 /* membarrier */
