// services/network/public/mojom/url_request.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'services/network/public/mojom/url_request.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('network.mojom');
  var big_buffer$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/big_buffer.mojom', '../../../../mojo/public/mojom/base/big_buffer.mojom.js');
  }
  var file_path$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/file_path.mojom', '../../../../mojo/public/mojom/base/file_path.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var unguessable_token$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/unguessable_token.mojom', '../../../../mojo/public/mojom/base/unguessable_token.mojom.js');
  }
  var url_loader_network_service_observer$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_loader_network_service_observer.mojom', 'url_loader_network_service_observer.mojom.js');
  }
  var client_security_state$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/client_security_state.mojom', 'client_security_state.mojom.js');
  }
  var cors$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/cors.mojom', 'cors.mojom.js');
  }
  var cookie_access_observer$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/cookie_access_observer.mojom', 'cookie_access_observer.mojom.js');
  }
  var cookie_manager$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/cookie_manager.mojom', 'cookie_manager.mojom.js');
  }
  var chunked_data_pipe_getter$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/chunked_data_pipe_getter.mojom', 'chunked_data_pipe_getter.mojom.js');
  }
  var data_pipe_getter$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/data_pipe_getter.mojom', 'data_pipe_getter.mojom.js');
  }
  var fetch_api$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/fetch_api.mojom', 'fetch_api.mojom.js');
  }
  var http_raw_headers$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/http_raw_headers.mojom', 'http_raw_headers.mojom.js');
  }
  var http_request_headers$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/http_request_headers.mojom', 'http_request_headers.mojom.js');
  }
  var ip_address_space$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/ip_address_space.mojom', 'ip_address_space.mojom.js');
  }
  var isolation_info$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/isolation_info.mojom', 'isolation_info.mojom.js');
  }
  var network_param$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/network_param.mojom', 'network_param.mojom.js');
  }
  var site_for_cookies$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/site_for_cookies.mojom', 'site_for_cookies.mojom.js');
  }
  var trust_tokens$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/trust_tokens.mojom', 'trust_tokens.mojom.js');
  }
  var url_response_head$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/url_response_head.mojom', 'url_response_head.mojom.js');
  }
  var web_bundle_handle$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/web_bundle_handle.mojom', 'web_bundle_handle.mojom.js');
  }
  var accept_ch_frame_observer$ =
      mojo.internal.exposeNamespace('network.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/network/public/mojom/accept_ch_frame_observer.mojom', 'accept_ch_frame_observer.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../url/mojom/origin.mojom.js');
  }
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../url/mojom/url.mojom.js');
  }


  var RequestPriority = {};
  RequestPriority.kThrottled = 0;
  RequestPriority.kIdle = 1;
  RequestPriority.kLowest = 2;
  RequestPriority.kLow = 3;
  RequestPriority.kMedium = 4;
  RequestPriority.kHighest = 5;
  RequestPriority.MIN_VALUE = 0;
  RequestPriority.MAX_VALUE = 5;

  RequestPriority.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    }
    return false;
  };

  RequestPriority.toKnownEnumValue = function(value) {
    return value;
  };

  RequestPriority.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var SourceType = {};
  SourceType.kBrotli = 0;
  SourceType.kDeflate = 1;
  SourceType.kGzip = 2;
  SourceType.kNone = 3;
  SourceType.kUnknown = 4;
  SourceType.MIN_VALUE = 0;
  SourceType.MAX_VALUE = 4;

  SourceType.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  SourceType.toKnownEnumValue = function(value) {
    return value;
  };

  SourceType.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var URLRequestReferrerPolicy = {};
  URLRequestReferrerPolicy.kClearReferrerOnTransitionFromSecureToInsecure = 0;
  URLRequestReferrerPolicy.kReduceReferrerGranularityOnTransitionCrossOrigin = 1;
  URLRequestReferrerPolicy.kOriginOnlyOnTransitionCrossOrigin = 2;
  URLRequestReferrerPolicy.kNeverClearReferrer = 3;
  URLRequestReferrerPolicy.kOrigin = 4;
  URLRequestReferrerPolicy.kClearReferrerOnTransitionCrossOrigin = 5;
  URLRequestReferrerPolicy.kOriginClearOnTransitionFromSecureToInsecure = 6;
  URLRequestReferrerPolicy.kNoReferrer = 7;
  URLRequestReferrerPolicy.MIN_VALUE = 0;
  URLRequestReferrerPolicy.MAX_VALUE = 7;

  URLRequestReferrerPolicy.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    }
    return false;
  };

  URLRequestReferrerPolicy.toKnownEnumValue = function(value) {
    return value;
  };

  URLRequestReferrerPolicy.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function URLLoaderCompletionStatus(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  URLLoaderCompletionStatus.prototype.initDefaults_ = function() {
  };
  URLLoaderCompletionStatus.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  URLLoaderCompletionStatus.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  URLLoaderCompletionStatus.encodedSize = codec.kStructHeaderSize + 0;

  URLLoaderCompletionStatus.decode = function(decoder) {
    var packed;
    var val = new URLLoaderCompletionStatus();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  URLLoaderCompletionStatus.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(URLLoaderCompletionStatus.encodedSize);
    encoder.writeUint32(0);
  };
  function TrustedUrlRequestParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  TrustedUrlRequestParams.prototype.initDefaults_ = function() {
    this.isolationInfo = null;
    this.disableSecureDns = false;
    this.hasUserActivation = false;
    this.cookieObserver = new cookie_access_observer$.CookieAccessObserverPtr();
    this.urlLoaderNetworkObserver = new url_loader_network_service_observer$.URLLoaderNetworkServiceObserverPtr();
    this.devtoolsObserver = new DevToolsObserverPtr();
    this.clientSecurityState = null;
    this.acceptChFrameObserver = new accept_ch_frame_observer$.AcceptCHFrameObserverPtr();
  };
  TrustedUrlRequestParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  TrustedUrlRequestParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TrustedUrlRequestParams.isolationInfo
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, isolation_info$.IsolationInfo, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate TrustedUrlRequestParams.cookieObserver
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 12, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TrustedUrlRequestParams.urlLoaderNetworkObserver
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 20, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TrustedUrlRequestParams.devtoolsObserver
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 28, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TrustedUrlRequestParams.clientSecurityState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, client_security_state$.ClientSecurityState, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate TrustedUrlRequestParams.acceptChFrameObserver
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 48, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  TrustedUrlRequestParams.encodedSize = codec.kStructHeaderSize + 56;

  TrustedUrlRequestParams.decode = function(decoder) {
    var packed;
    var val = new TrustedUrlRequestParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.isolationInfo =
        decoder.decodeStructPointer(isolation_info$.IsolationInfo);
    packed = decoder.readUint8();
    val.disableSecureDns = (packed >> 0) & 1 ? true : false;
    val.hasUserActivation = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.cookieObserver =
        decoder.decodeStruct(new codec.NullableInterface(cookie_access_observer$.CookieAccessObserverPtr));
    val.urlLoaderNetworkObserver =
        decoder.decodeStruct(new codec.NullableInterface(url_loader_network_service_observer$.URLLoaderNetworkServiceObserverPtr));
    val.devtoolsObserver =
        decoder.decodeStruct(new codec.NullableInterface(DevToolsObserverPtr));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.clientSecurityState =
        decoder.decodeStructPointer(client_security_state$.ClientSecurityState);
    val.acceptChFrameObserver =
        decoder.decodeStruct(new codec.NullableInterface(accept_ch_frame_observer$.AcceptCHFrameObserverPtr));
    return val;
  };

  TrustedUrlRequestParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(TrustedUrlRequestParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(isolation_info$.IsolationInfo, val.isolationInfo);
    packed = 0;
    packed |= (val.disableSecureDns & 1) << 0
    packed |= (val.hasUserActivation & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(new codec.NullableInterface(cookie_access_observer$.CookieAccessObserverPtr), val.cookieObserver);
    encoder.encodeStruct(new codec.NullableInterface(url_loader_network_service_observer$.URLLoaderNetworkServiceObserverPtr), val.urlLoaderNetworkObserver);
    encoder.encodeStruct(new codec.NullableInterface(DevToolsObserverPtr), val.devtoolsObserver);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStructPointer(client_security_state$.ClientSecurityState, val.clientSecurityState);
    encoder.encodeStruct(new codec.NullableInterface(accept_ch_frame_observer$.AcceptCHFrameObserverPtr), val.acceptChFrameObserver);
  };
  function WebBundleTokenParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  WebBundleTokenParams.prototype.initDefaults_ = function() {
    this.bundleUrl = null;
    this.token = null;
    this.webBundleHandle = new web_bundle_handle$.WebBundleHandlePtr();
    this.renderProcessId = 0;
  };
  WebBundleTokenParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  WebBundleTokenParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleTokenParams.bundleUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleTokenParams.token
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate WebBundleTokenParams.webBundleHandle
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 16, true);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  WebBundleTokenParams.encodedSize = codec.kStructHeaderSize + 32;

  WebBundleTokenParams.decode = function(decoder) {
    var packed;
    var val = new WebBundleTokenParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.bundleUrl =
        decoder.decodeStructPointer(url$.Url);
    val.token =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.webBundleHandle =
        decoder.decodeStruct(new codec.NullableInterface(web_bundle_handle$.WebBundleHandlePtr));
    val.renderProcessId =
        decoder.decodeStruct(codec.Int32);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  WebBundleTokenParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(WebBundleTokenParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.bundleUrl);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.token);
    encoder.encodeStruct(new codec.NullableInterface(web_bundle_handle$.WebBundleHandlePtr), val.webBundleHandle);
    encoder.encodeStruct(codec.Int32, val.renderProcessId);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function URLRequest(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  URLRequest.prototype.initDefaults_ = function() {
    this.method = null;
    this.url = null;
    this.siteForCookies = null;
    this.updateFirstPartyUrlOnRedirect = false;
    this.shouldResetAppcache = false;
    this.isExternalRequest = false;
    this.originatedFromServiceWorker = false;
    this.skipServiceWorker = false;
    this.corbDetachable = false;
    this.keepalive = false;
    this.hasUserGesture = false;
    this.enableLoadTiming = false;
    this.enableUploadProgress = false;
    this.doNotPromptForLogin = false;
    this.isMainFrame = false;
    this.reportRawHeaders = false;
    this.upgradeIfInsecure = false;
    this.isRevalidating = false;
    this.isSignedExchangePrefetchCacheEnabled = false;
    this.isFetchLikeApi = false;
    this.isFavicon = false;
    this.obeyOriginPolicy = false;
    this.referrerPolicy = 0;
    this.requestInitiator = null;
    this.isolatedWorldOrigin = null;
    this.referrer = null;
    this.headers = null;
    this.corsExemptHeaders = null;
    this.loadFlags = 0;
    this.resourceType = 0;
    this.priority = 0;
    this.corsPreflightPolicy = 0;
    this.mode = 0;
    this.credentialsMode = 0;
    this.redirectMode = 0;
    this.destination = 0;
    this.fetchIntegrity = null;
    this.requestBody = null;
    this.transitionType = 0;
    this.previewsState = 0;
    this.throttlingProfileId = null;
    this.fetchWindowId = null;
    this.devtoolsRequestId = null;
    this.devtoolsStackId = null;
    this.trustedParams = null;
    this.recursivePrefetchToken = null;
    this.trustTokenParams = null;
    this.webBundleTokenParams = null;
    this.devtoolsAcceptedStreamTypes = null;
  };
  URLRequest.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  URLRequest.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 208}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.method
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.siteForCookies
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, site_for_cookies$.SiteForCookies, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate URLRequest.requestInitiator
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, origin$.Origin, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.isolatedWorldOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, origin$.Origin, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.referrer
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.referrerPolicy
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 28, URLRequestReferrerPolicy);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.headers
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 56, http_request_headers$.HttpRequestHeaders, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.corsExemptHeaders
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 64, http_request_headers$.HttpRequestHeaders, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate URLRequest.priority
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 80, RequestPriority);
    if (err !== validator.validationError.NONE)
        return err;




    // validate URLRequest.corsPreflightPolicy
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 84, cors$.CorsPreflightPolicy);
    if (err !== validator.validationError.NONE)
        return err;





    // validate URLRequest.mode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 88, fetch_api$.RequestMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.credentialsMode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 92, fetch_api$.CredentialsMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.redirectMode
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 96, fetch_api$.RedirectMode);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.fetchIntegrity
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 104, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.destination
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 100, fetch_api$.RequestDestination);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.requestBody
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 112, URLRequestBody, true);
    if (err !== validator.validationError.NONE)
        return err;













    // validate URLRequest.throttlingProfileId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 128, unguessable_token$.UnguessableToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.fetchWindowId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 136, unguessable_token$.UnguessableToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.devtoolsRequestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 144, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.devtoolsStackId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 152, true)
    if (err !== validator.validationError.NONE)
        return err;






    // validate URLRequest.trustedParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 160, TrustedUrlRequestParams, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.recursivePrefetchToken
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 168, unguessable_token$.UnguessableToken, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.trustTokenParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 176, trust_tokens$.TrustTokenParams, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.webBundleTokenParams
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 184, WebBundleTokenParams, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequest.devtoolsAcceptedStreamTypes
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 192, 4, new codec.Enum(SourceType), true, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  URLRequest.encodedSize = codec.kStructHeaderSize + 200;

  URLRequest.decode = function(decoder) {
    var packed;
    var val = new URLRequest();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.method =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.siteForCookies =
        decoder.decodeStructPointer(site_for_cookies$.SiteForCookies);
    packed = decoder.readUint8();
    val.updateFirstPartyUrlOnRedirect = (packed >> 0) & 1 ? true : false;
    val.shouldResetAppcache = (packed >> 1) & 1 ? true : false;
    val.isExternalRequest = (packed >> 2) & 1 ? true : false;
    val.originatedFromServiceWorker = (packed >> 3) & 1 ? true : false;
    val.skipServiceWorker = (packed >> 4) & 1 ? true : false;
    val.corbDetachable = (packed >> 5) & 1 ? true : false;
    val.keepalive = (packed >> 6) & 1 ? true : false;
    val.hasUserGesture = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.enableLoadTiming = (packed >> 0) & 1 ? true : false;
    val.enableUploadProgress = (packed >> 1) & 1 ? true : false;
    val.doNotPromptForLogin = (packed >> 2) & 1 ? true : false;
    val.isMainFrame = (packed >> 3) & 1 ? true : false;
    val.reportRawHeaders = (packed >> 4) & 1 ? true : false;
    val.upgradeIfInsecure = (packed >> 5) & 1 ? true : false;
    val.isRevalidating = (packed >> 6) & 1 ? true : false;
    val.isSignedExchangePrefetchCacheEnabled = (packed >> 7) & 1 ? true : false;
    packed = decoder.readUint8();
    val.isFetchLikeApi = (packed >> 0) & 1 ? true : false;
    val.isFavicon = (packed >> 1) & 1 ? true : false;
    val.obeyOriginPolicy = (packed >> 2) & 1 ? true : false;
    decoder.skip(1);
    val.referrerPolicy =
        decoder.decodeStruct(new codec.Enum(URLRequestReferrerPolicy));
    val.requestInitiator =
        decoder.decodeStructPointer(origin$.Origin);
    val.isolatedWorldOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.referrer =
        decoder.decodeStructPointer(url$.Url);
    val.headers =
        decoder.decodeStructPointer(http_request_headers$.HttpRequestHeaders);
    val.corsExemptHeaders =
        decoder.decodeStructPointer(http_request_headers$.HttpRequestHeaders);
    val.loadFlags =
        decoder.decodeStruct(codec.Int32);
    val.resourceType =
        decoder.decodeStruct(codec.Int32);
    val.priority =
        decoder.decodeStruct(new codec.Enum(RequestPriority));
    val.corsPreflightPolicy =
        decoder.decodeStruct(new codec.Enum(cors$.CorsPreflightPolicy));
    val.mode =
        decoder.decodeStruct(new codec.Enum(fetch_api$.RequestMode));
    val.credentialsMode =
        decoder.decodeStruct(new codec.Enum(fetch_api$.CredentialsMode));
    val.redirectMode =
        decoder.decodeStruct(new codec.Enum(fetch_api$.RedirectMode));
    val.destination =
        decoder.decodeStruct(new codec.Enum(fetch_api$.RequestDestination));
    val.fetchIntegrity =
        decoder.decodeStruct(codec.String);
    val.requestBody =
        decoder.decodeStructPointer(URLRequestBody);
    val.transitionType =
        decoder.decodeStruct(codec.Int32);
    val.previewsState =
        decoder.decodeStruct(codec.Int32);
    val.throttlingProfileId =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.fetchWindowId =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.devtoolsRequestId =
        decoder.decodeStruct(codec.NullableString);
    val.devtoolsStackId =
        decoder.decodeStruct(codec.NullableString);
    val.trustedParams =
        decoder.decodeStructPointer(TrustedUrlRequestParams);
    val.recursivePrefetchToken =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.trustTokenParams =
        decoder.decodeStructPointer(trust_tokens$.TrustTokenParams);
    val.webBundleTokenParams =
        decoder.decodeStructPointer(WebBundleTokenParams);
    val.devtoolsAcceptedStreamTypes =
        decoder.decodeArrayPointer(new codec.Enum(SourceType));
    return val;
  };

  URLRequest.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(URLRequest.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.method);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(site_for_cookies$.SiteForCookies, val.siteForCookies);
    packed = 0;
    packed |= (val.updateFirstPartyUrlOnRedirect & 1) << 0
    packed |= (val.shouldResetAppcache & 1) << 1
    packed |= (val.isExternalRequest & 1) << 2
    packed |= (val.originatedFromServiceWorker & 1) << 3
    packed |= (val.skipServiceWorker & 1) << 4
    packed |= (val.corbDetachable & 1) << 5
    packed |= (val.keepalive & 1) << 6
    packed |= (val.hasUserGesture & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.enableLoadTiming & 1) << 0
    packed |= (val.enableUploadProgress & 1) << 1
    packed |= (val.doNotPromptForLogin & 1) << 2
    packed |= (val.isMainFrame & 1) << 3
    packed |= (val.reportRawHeaders & 1) << 4
    packed |= (val.upgradeIfInsecure & 1) << 5
    packed |= (val.isRevalidating & 1) << 6
    packed |= (val.isSignedExchangePrefetchCacheEnabled & 1) << 7
    encoder.writeUint8(packed);
    packed = 0;
    packed |= (val.isFetchLikeApi & 1) << 0
    packed |= (val.isFavicon & 1) << 1
    packed |= (val.obeyOriginPolicy & 1) << 2
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.referrerPolicy);
    encoder.encodeStructPointer(origin$.Origin, val.requestInitiator);
    encoder.encodeStructPointer(origin$.Origin, val.isolatedWorldOrigin);
    encoder.encodeStructPointer(url$.Url, val.referrer);
    encoder.encodeStructPointer(http_request_headers$.HttpRequestHeaders, val.headers);
    encoder.encodeStructPointer(http_request_headers$.HttpRequestHeaders, val.corsExemptHeaders);
    encoder.encodeStruct(codec.Int32, val.loadFlags);
    encoder.encodeStruct(codec.Int32, val.resourceType);
    encoder.encodeStruct(codec.Int32, val.priority);
    encoder.encodeStruct(codec.Int32, val.corsPreflightPolicy);
    encoder.encodeStruct(codec.Int32, val.mode);
    encoder.encodeStruct(codec.Int32, val.credentialsMode);
    encoder.encodeStruct(codec.Int32, val.redirectMode);
    encoder.encodeStruct(codec.Int32, val.destination);
    encoder.encodeStruct(codec.String, val.fetchIntegrity);
    encoder.encodeStructPointer(URLRequestBody, val.requestBody);
    encoder.encodeStruct(codec.Int32, val.transitionType);
    encoder.encodeStruct(codec.Int32, val.previewsState);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.throttlingProfileId);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.fetchWindowId);
    encoder.encodeStruct(codec.NullableString, val.devtoolsRequestId);
    encoder.encodeStruct(codec.NullableString, val.devtoolsStackId);
    encoder.encodeStructPointer(TrustedUrlRequestParams, val.trustedParams);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.recursivePrefetchToken);
    encoder.encodeStructPointer(trust_tokens$.TrustTokenParams, val.trustTokenParams);
    encoder.encodeStructPointer(WebBundleTokenParams, val.webBundleTokenParams);
    encoder.encodeArrayPointer(new codec.Enum(SourceType), val.devtoolsAcceptedStreamTypes);
  };
  function URLRequestBody(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  URLRequestBody.prototype.initDefaults_ = function() {
    this.elements = null;
    this.identifier = 0;
    this.containsSensitiveInfo = false;
    this.allowHttp1ForStreamingUpload = false;
  };
  URLRequestBody.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  URLRequestBody.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate URLRequestBody.elements
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 16, DataElement, false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;




    return validator.validationError.NONE;
  };

  URLRequestBody.encodedSize = codec.kStructHeaderSize + 24;

  URLRequestBody.decode = function(decoder) {
    var packed;
    var val = new URLRequestBody();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.elements =
        decoder.decodeArrayPointer(DataElement);
    val.identifier =
        decoder.decodeStruct(codec.Uint64);
    packed = decoder.readUint8();
    val.containsSensitiveInfo = (packed >> 0) & 1 ? true : false;
    val.allowHttp1ForStreamingUpload = (packed >> 1) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  URLRequestBody.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(URLRequestBody.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(DataElement, val.elements);
    encoder.encodeStruct(codec.Uint64, val.identifier);
    packed = 0;
    packed |= (val.containsSensitiveInfo & 1) << 0
    packed |= (val.allowHttp1ForStreamingUpload & 1) << 1
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DataElementBytes(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataElementBytes.prototype.initDefaults_ = function() {
    this.data = null;
  };
  DataElementBytes.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataElementBytes.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataElementBytes.data
    err = messageValidator.validateUnion(offset + codec.kStructHeaderSize + 0, big_buffer$.BigBuffer, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataElementBytes.encodedSize = codec.kStructHeaderSize + 16;

  DataElementBytes.decode = function(decoder) {
    var packed;
    var val = new DataElementBytes();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStruct(big_buffer$.BigBuffer);
    return val;
  };

  DataElementBytes.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataElementBytes.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(big_buffer$.BigBuffer, val.data);
  };
  function DataElementFile(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataElementFile.prototype.initDefaults_ = function() {
    this.path = null;
    this.offset = 0;
    this.length = 0;
    this.expectedModificationTime = null;
  };
  DataElementFile.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataElementFile.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataElementFile.path
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, file_path$.FilePath, false);
    if (err !== validator.validationError.NONE)
        return err;




    // validate DataElementFile.expectedModificationTime
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.Time, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataElementFile.encodedSize = codec.kStructHeaderSize + 32;

  DataElementFile.decode = function(decoder) {
    var packed;
    var val = new DataElementFile();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.path =
        decoder.decodeStructPointer(file_path$.FilePath);
    val.offset =
        decoder.decodeStruct(codec.Uint64);
    val.length =
        decoder.decodeStruct(codec.Uint64);
    val.expectedModificationTime =
        decoder.decodeStructPointer(time$.Time);
    return val;
  };

  DataElementFile.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataElementFile.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(file_path$.FilePath, val.path);
    encoder.encodeStruct(codec.Uint64, val.offset);
    encoder.encodeStruct(codec.Uint64, val.length);
    encoder.encodeStructPointer(time$.Time, val.expectedModificationTime);
  };
  function DataElementDataPipe(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataElementDataPipe.prototype.initDefaults_ = function() {
    this.dataPipeGetter = new data_pipe_getter$.DataPipeGetterPtr();
  };
  DataElementDataPipe.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataElementDataPipe.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataElementDataPipe.dataPipeGetter
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DataElementDataPipe.encodedSize = codec.kStructHeaderSize + 8;

  DataElementDataPipe.decode = function(decoder) {
    var packed;
    var val = new DataElementDataPipe();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dataPipeGetter =
        decoder.decodeStruct(new codec.Interface(data_pipe_getter$.DataPipeGetterPtr));
    return val;
  };

  DataElementDataPipe.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataElementDataPipe.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(data_pipe_getter$.DataPipeGetterPtr), val.dataPipeGetter);
  };
  function DataElementChunkedDataPipe(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DataElementChunkedDataPipe.prototype.initDefaults_ = function() {
    this.dataPipeGetter = new chunked_data_pipe_getter$.ChunkedDataPipeGetterPtr();
    this.readOnlyOnce = false;
  };
  DataElementChunkedDataPipe.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DataElementChunkedDataPipe.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DataElementChunkedDataPipe.dataPipeGetter
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  DataElementChunkedDataPipe.encodedSize = codec.kStructHeaderSize + 16;

  DataElementChunkedDataPipe.decode = function(decoder) {
    var packed;
    var val = new DataElementChunkedDataPipe();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.dataPipeGetter =
        decoder.decodeStruct(new codec.Interface(chunked_data_pipe_getter$.ChunkedDataPipeGetterPtr));
    packed = decoder.readUint8();
    val.readOnlyOnce = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DataElementChunkedDataPipe.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DataElementChunkedDataPipe.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.Interface(chunked_data_pipe_getter$.ChunkedDataPipeGetterPtr), val.dataPipeGetter);
    packed = 0;
    packed |= (val.readOnlyOnce & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DevToolsObserver_OnRawRequest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnRawRequest_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.cookiesWithAccessResult = null;
    this.headers = null;
    this.clientSecurityState = null;
  };
  DevToolsObserver_OnRawRequest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnRawRequest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnRawRequest_Params.devtoolRequestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnRawRequest_Params.cookiesWithAccessResult
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(cookie_manager$.CookieWithAccessResult), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnRawRequest_Params.headers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(http_raw_headers$.HttpRawHeaderPair), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnRawRequest_Params.clientSecurityState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, client_security_state$.ClientSecurityState, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnRawRequest_Params.encodedSize = codec.kStructHeaderSize + 32;

  DevToolsObserver_OnRawRequest_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnRawRequest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStruct(codec.String);
    val.cookiesWithAccessResult =
        decoder.decodeArrayPointer(new codec.PointerTo(cookie_manager$.CookieWithAccessResult));
    val.headers =
        decoder.decodeArrayPointer(new codec.PointerTo(http_raw_headers$.HttpRawHeaderPair));
    val.clientSecurityState =
        decoder.decodeStructPointer(client_security_state$.ClientSecurityState);
    return val;
  };

  DevToolsObserver_OnRawRequest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnRawRequest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.devtoolRequestId);
    encoder.encodeArrayPointer(new codec.PointerTo(cookie_manager$.CookieWithAccessResult), val.cookiesWithAccessResult);
    encoder.encodeArrayPointer(new codec.PointerTo(http_raw_headers$.HttpRawHeaderPair), val.headers);
    encoder.encodeStructPointer(client_security_state$.ClientSecurityState, val.clientSecurityState);
  };
  function DevToolsObserver_OnRawResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnRawResponse_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.cookiesWithAccessResult = null;
    this.headers = null;
    this.rawResponseHeaders = null;
    this.resourceAddressSpace = 0;
  };
  DevToolsObserver_OnRawResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnRawResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnRawResponse_Params.devtoolRequestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnRawResponse_Params.cookiesWithAccessResult
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(cookie_manager$.CookieAndLineWithAccessResult), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnRawResponse_Params.headers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 16, 8, new codec.PointerTo(http_raw_headers$.HttpRawHeaderPair), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnRawResponse_Params.rawResponseHeaders
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnRawResponse_Params.resourceAddressSpace
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 32, ip_address_space$.IPAddressSpace);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnRawResponse_Params.encodedSize = codec.kStructHeaderSize + 40;

  DevToolsObserver_OnRawResponse_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnRawResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStruct(codec.String);
    val.cookiesWithAccessResult =
        decoder.decodeArrayPointer(new codec.PointerTo(cookie_manager$.CookieAndLineWithAccessResult));
    val.headers =
        decoder.decodeArrayPointer(new codec.PointerTo(http_raw_headers$.HttpRawHeaderPair));
    val.rawResponseHeaders =
        decoder.decodeStruct(codec.NullableString);
    val.resourceAddressSpace =
        decoder.decodeStruct(new codec.Enum(ip_address_space$.IPAddressSpace));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DevToolsObserver_OnRawResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnRawResponse_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.devtoolRequestId);
    encoder.encodeArrayPointer(new codec.PointerTo(cookie_manager$.CookieAndLineWithAccessResult), val.cookiesWithAccessResult);
    encoder.encodeArrayPointer(new codec.PointerTo(http_raw_headers$.HttpRawHeaderPair), val.headers);
    encoder.encodeStruct(codec.NullableString, val.rawResponseHeaders);
    encoder.encodeStruct(codec.Int32, val.resourceAddressSpace);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function DevToolsObserver_OnPrivateNetworkRequest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnPrivateNetworkRequest_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.url = null;
    this.isWarning = false;
    this.resourceAddressSpace = 0;
    this.clientSecurityState = null;
  };
  DevToolsObserver_OnPrivateNetworkRequest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnPrivateNetworkRequest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnPrivateNetworkRequest_Params.devtoolRequestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnPrivateNetworkRequest_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate DevToolsObserver_OnPrivateNetworkRequest_Params.resourceAddressSpace
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 20, ip_address_space$.IPAddressSpace);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnPrivateNetworkRequest_Params.clientSecurityState
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, client_security_state$.ClientSecurityState, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnPrivateNetworkRequest_Params.encodedSize = codec.kStructHeaderSize + 32;

  DevToolsObserver_OnPrivateNetworkRequest_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnPrivateNetworkRequest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStruct(codec.NullableString);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    packed = decoder.readUint8();
    val.isWarning = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.resourceAddressSpace =
        decoder.decodeStruct(new codec.Enum(ip_address_space$.IPAddressSpace));
    val.clientSecurityState =
        decoder.decodeStructPointer(client_security_state$.ClientSecurityState);
    return val;
  };

  DevToolsObserver_OnPrivateNetworkRequest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnPrivateNetworkRequest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.devtoolRequestId);
    encoder.encodeStructPointer(url$.Url, val.url);
    packed = 0;
    packed |= (val.isWarning & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.Int32, val.resourceAddressSpace);
    encoder.encodeStructPointer(client_security_state$.ClientSecurityState, val.clientSecurityState);
  };
  function DevToolsObserver_OnCorsPreflightRequest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnCorsPreflightRequest_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.request = null;
    this.initiatorUrl = null;
    this.initiatorDevtoolRequestId = null;
  };
  DevToolsObserver_OnCorsPreflightRequest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnCorsPreflightRequest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsPreflightRequest_Params.devtoolRequestId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsPreflightRequest_Params.request
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, URLRequest, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsPreflightRequest_Params.initiatorUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsPreflightRequest_Params.initiatorDevtoolRequestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnCorsPreflightRequest_Params.encodedSize = codec.kStructHeaderSize + 32;

  DevToolsObserver_OnCorsPreflightRequest_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnCorsPreflightRequest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.request =
        decoder.decodeStructPointer(URLRequest);
    val.initiatorUrl =
        decoder.decodeStructPointer(url$.Url);
    val.initiatorDevtoolRequestId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  DevToolsObserver_OnCorsPreflightRequest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnCorsPreflightRequest_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.devtoolRequestId);
    encoder.encodeStructPointer(URLRequest, val.request);
    encoder.encodeStructPointer(url$.Url, val.initiatorUrl);
    encoder.encodeStruct(codec.String, val.initiatorDevtoolRequestId);
  };
  function DevToolsObserver_OnCorsPreflightResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnCorsPreflightResponse_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.url = null;
    this.head = null;
  };
  DevToolsObserver_OnCorsPreflightResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnCorsPreflightResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsPreflightResponse_Params.devtoolRequestId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsPreflightResponse_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsPreflightResponse_Params.head
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url_response_head$.URLResponseHead, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnCorsPreflightResponse_Params.encodedSize = codec.kStructHeaderSize + 24;

  DevToolsObserver_OnCorsPreflightResponse_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnCorsPreflightResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.head =
        decoder.decodeStructPointer(url_response_head$.URLResponseHead);
    return val;
  };

  DevToolsObserver_OnCorsPreflightResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnCorsPreflightResponse_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.devtoolRequestId);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(url_response_head$.URLResponseHead, val.head);
  };
  function DevToolsObserver_OnCorsPreflightRequestCompleted_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnCorsPreflightRequestCompleted_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.status = null;
  };
  DevToolsObserver_OnCorsPreflightRequestCompleted_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnCorsPreflightRequestCompleted_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsPreflightRequestCompleted_Params.devtoolRequestId
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, unguessable_token$.UnguessableToken, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsPreflightRequestCompleted_Params.status
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, URLLoaderCompletionStatus, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnCorsPreflightRequestCompleted_Params.encodedSize = codec.kStructHeaderSize + 16;

  DevToolsObserver_OnCorsPreflightRequestCompleted_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnCorsPreflightRequestCompleted_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStructPointer(unguessable_token$.UnguessableToken);
    val.status =
        decoder.decodeStructPointer(URLLoaderCompletionStatus);
    return val;
  };

  DevToolsObserver_OnCorsPreflightRequestCompleted_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnCorsPreflightRequestCompleted_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(unguessable_token$.UnguessableToken, val.devtoolRequestId);
    encoder.encodeStructPointer(URLLoaderCompletionStatus, val.status);
  };
  function DevToolsObserver_OnTrustTokenOperationDone_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnTrustTokenOperationDone_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.result = null;
  };
  DevToolsObserver_OnTrustTokenOperationDone_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnTrustTokenOperationDone_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnTrustTokenOperationDone_Params.devtoolRequestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnTrustTokenOperationDone_Params.result
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, trust_tokens$.TrustTokenOperationResult, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnTrustTokenOperationDone_Params.encodedSize = codec.kStructHeaderSize + 16;

  DevToolsObserver_OnTrustTokenOperationDone_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnTrustTokenOperationDone_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStruct(codec.String);
    val.result =
        decoder.decodeStructPointer(trust_tokens$.TrustTokenOperationResult);
    return val;
  };

  DevToolsObserver_OnTrustTokenOperationDone_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnTrustTokenOperationDone_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.devtoolRequestId);
    encoder.encodeStructPointer(trust_tokens$.TrustTokenOperationResult, val.result);
  };
  function DevToolsObserver_OnCorsError_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnCorsError_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.initiatorOrigin = null;
    this.url = null;
    this.status = null;
  };
  DevToolsObserver_OnCorsError_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnCorsError_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsError_Params.devtoolRequestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, true)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsError_Params.initiatorOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, origin$.Origin, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsError_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnCorsError_Params.status
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, cors$.CorsErrorStatus, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnCorsError_Params.encodedSize = codec.kStructHeaderSize + 32;

  DevToolsObserver_OnCorsError_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnCorsError_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStruct(codec.NullableString);
    val.initiatorOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.status =
        decoder.decodeStructPointer(cors$.CorsErrorStatus);
    return val;
  };

  DevToolsObserver_OnCorsError_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnCorsError_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.NullableString, val.devtoolRequestId);
    encoder.encodeStructPointer(origin$.Origin, val.initiatorOrigin);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStructPointer(cors$.CorsErrorStatus, val.status);
  };
  function DevToolsObserver_OnSubresourceWebBundleMetadata_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnSubresourceWebBundleMetadata_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.urls = null;
  };
  DevToolsObserver_OnSubresourceWebBundleMetadata_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnSubresourceWebBundleMetadata_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleMetadata_Params.devtoolRequestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleMetadata_Params.urls
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(url$.Url), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnSubresourceWebBundleMetadata_Params.encodedSize = codec.kStructHeaderSize + 16;

  DevToolsObserver_OnSubresourceWebBundleMetadata_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnSubresourceWebBundleMetadata_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStruct(codec.String);
    val.urls =
        decoder.decodeArrayPointer(new codec.PointerTo(url$.Url));
    return val;
  };

  DevToolsObserver_OnSubresourceWebBundleMetadata_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnSubresourceWebBundleMetadata_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.devtoolRequestId);
    encoder.encodeArrayPointer(new codec.PointerTo(url$.Url), val.urls);
  };
  function DevToolsObserver_OnSubresourceWebBundleMetadataError_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.prototype.initDefaults_ = function() {
    this.devtoolRequestId = null;
    this.errorMessage = null;
  };
  DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.devtoolRequestId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.encodedSize = codec.kStructHeaderSize + 16;

  DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnSubresourceWebBundleMetadataError_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devtoolRequestId =
        decoder.decodeStruct(codec.String);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    return val;
  };

  DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.devtoolRequestId);
    encoder.encodeStruct(codec.String, val.errorMessage);
  };
  function DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.prototype.initDefaults_ = function() {
    this.innerRequestDevtoolsId = null;
    this.url = null;
    this.bundleRequestDevtoolsId = null;
  };
  DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.innerRequestDevtoolsId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.bundleRequestDevtoolsId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.encodedSize = codec.kStructHeaderSize + 24;

  DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.innerRequestDevtoolsId =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.bundleRequestDevtoolsId =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.innerRequestDevtoolsId);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.NullableString, val.bundleRequestDevtoolsId);
  };
  function DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.prototype.initDefaults_ = function() {
    this.innerRequestDevtoolsId = null;
    this.url = null;
    this.errorMessage = null;
    this.bundleRequestDevtoolsId = null;
  };
  DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.innerRequestDevtoolsId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.errorMessage
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.bundleRequestDevtoolsId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 24, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.encodedSize = codec.kStructHeaderSize + 32;

  DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.innerRequestDevtoolsId =
        decoder.decodeStruct(codec.String);
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.errorMessage =
        decoder.decodeStruct(codec.String);
    val.bundleRequestDevtoolsId =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.innerRequestDevtoolsId);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.errorMessage);
    encoder.encodeStruct(codec.NullableString, val.bundleRequestDevtoolsId);
  };
  function DevToolsObserver_Clone_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  DevToolsObserver_Clone_Params.prototype.initDefaults_ = function() {
    this.listener = new bindings.InterfaceRequest();
  };
  DevToolsObserver_Clone_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  DevToolsObserver_Clone_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate DevToolsObserver_Clone_Params.listener
    err = messageValidator.validateInterfaceRequest(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  DevToolsObserver_Clone_Params.encodedSize = codec.kStructHeaderSize + 8;

  DevToolsObserver_Clone_Params.decode = function(decoder) {
    var packed;
    var val = new DevToolsObserver_Clone_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.listener =
        decoder.decodeStruct(codec.InterfaceRequest);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  DevToolsObserver_Clone_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(DevToolsObserver_Clone_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.InterfaceRequest, val.listener);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };

  function DataElement(value) {
    this.initDefault_();
    this.initValue_(value);
  }


  DataElement.Tags = {
    bytes: 0,
    file: 1,
    dataPipe: 2,
    chunkedDataPipe: 3,
  };

  DataElement.prototype.initDefault_ = function() {
    this.$data = null;
    this.$tag = undefined;
  }

  DataElement.prototype.initValue_ = function(value) {
    if (value == undefined) {
      return;
    }

    var keys = Object.keys(value);
    if (keys.length == 0) {
      return;
    }

    if (keys.length > 1) {
      throw new TypeError("You may set only one member on a union.");
    }

    var fields = [
        "bytes",
        "file",
        "dataPipe",
        "chunkedDataPipe",
    ];

    if (fields.indexOf(keys[0]) < 0) {
      throw new ReferenceError(keys[0] + " is not a DataElement member.");

    }

    this[keys[0]] = value[keys[0]];
  }
  Object.defineProperty(DataElement.prototype, "bytes", {
    get: function() {
      if (this.$tag != DataElement.Tags.bytes) {
        throw new ReferenceError(
            "DataElement.bytes is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DataElement.Tags.bytes;
      this.$data = value;
    }
  });
  Object.defineProperty(DataElement.prototype, "file", {
    get: function() {
      if (this.$tag != DataElement.Tags.file) {
        throw new ReferenceError(
            "DataElement.file is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DataElement.Tags.file;
      this.$data = value;
    }
  });
  Object.defineProperty(DataElement.prototype, "dataPipe", {
    get: function() {
      if (this.$tag != DataElement.Tags.dataPipe) {
        throw new ReferenceError(
            "DataElement.dataPipe is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DataElement.Tags.dataPipe;
      this.$data = value;
    }
  });
  Object.defineProperty(DataElement.prototype, "chunkedDataPipe", {
    get: function() {
      if (this.$tag != DataElement.Tags.chunkedDataPipe) {
        throw new ReferenceError(
            "DataElement.chunkedDataPipe is not currently set.");
      }
      return this.$data;
    },

    set: function(value) {
      this.$tag = DataElement.Tags.chunkedDataPipe;
      this.$data = value;
    }
  });


    DataElement.encode = function(encoder, val) {
      if (val == null) {
        encoder.writeUint64(0);
        encoder.writeUint64(0);
        return;
      }
      if (val.$tag == undefined) {
        throw new TypeError("Cannot encode unions with an unknown member set.");
      }

      encoder.writeUint32(16);
      encoder.writeUint32(val.$tag);
      switch (val.$tag) {
        case DataElement.Tags.bytes:
          encoder.encodeStructPointer(DataElementBytes, val.bytes);
          break;
        case DataElement.Tags.file:
          encoder.encodeStructPointer(DataElementFile, val.file);
          break;
        case DataElement.Tags.dataPipe:
          encoder.encodeStructPointer(DataElementDataPipe, val.dataPipe);
          break;
        case DataElement.Tags.chunkedDataPipe:
          encoder.encodeStructPointer(DataElementChunkedDataPipe, val.chunkedDataPipe);
          break;
      }
      encoder.align();
    };


    DataElement.decode = function(decoder) {
      var size = decoder.readUint32();
      if (size == 0) {
        decoder.readUint32();
        decoder.readUint64();
        return null;
      }

      var result = new DataElement();
      var tag = decoder.readUint32();
      switch (tag) {
        case DataElement.Tags.bytes:
          result.bytes = decoder.decodeStructPointer(DataElementBytes);
          break;
        case DataElement.Tags.file:
          result.file = decoder.decodeStructPointer(DataElementFile);
          break;
        case DataElement.Tags.dataPipe:
          result.dataPipe = decoder.decodeStructPointer(DataElementDataPipe);
          break;
        case DataElement.Tags.chunkedDataPipe:
          result.chunkedDataPipe = decoder.decodeStructPointer(DataElementChunkedDataPipe);
          break;
      }
      decoder.align();

      return result;
    };


    DataElement.validate = function(messageValidator, offset) {
      var size = messageValidator.decodeUnionSize(offset);
      if (size != 16) {
        return validator.validationError.INVALID_UNION_SIZE;
      }

      var tag = messageValidator.decodeUnionTag(offset);
      var data_offset = offset + 8;
      var err;
      switch (tag) {
        case DataElement.Tags.bytes:
          

    // validate DataElement.bytes
    err = messageValidator.validateStructPointer(data_offset, DataElementBytes, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case DataElement.Tags.file:
          

    // validate DataElement.file
    err = messageValidator.validateStructPointer(data_offset, DataElementFile, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case DataElement.Tags.dataPipe:
          

    // validate DataElement.dataPipe
    err = messageValidator.validateStructPointer(data_offset, DataElementDataPipe, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
        case DataElement.Tags.chunkedDataPipe:
          

    // validate DataElement.chunkedDataPipe
    err = messageValidator.validateStructPointer(data_offset, DataElementChunkedDataPipe, false);
    if (err !== validator.validationError.NONE)
        return err;
          break;
      }

      return validator.validationError.NONE;
    };

  DataElement.encodedSize = 16;
  var kDevToolsObserver_OnRawRequest_Name = 1703877632;
  var kDevToolsObserver_OnRawResponse_Name = 1511934995;
  var kDevToolsObserver_OnPrivateNetworkRequest_Name = 1187808014;
  var kDevToolsObserver_OnCorsPreflightRequest_Name = 1523948986;
  var kDevToolsObserver_OnCorsPreflightResponse_Name = 1267795793;
  var kDevToolsObserver_OnCorsPreflightRequestCompleted_Name = 979865488;
  var kDevToolsObserver_OnTrustTokenOperationDone_Name = 551511837;
  var kDevToolsObserver_OnCorsError_Name = 1404428906;
  var kDevToolsObserver_OnSubresourceWebBundleMetadata_Name = 243204056;
  var kDevToolsObserver_OnSubresourceWebBundleMetadataError_Name = 877072051;
  var kDevToolsObserver_OnSubresourceWebBundleInnerResponse_Name = 660449804;
  var kDevToolsObserver_OnSubresourceWebBundleInnerResponseError_Name = 2120789743;
  var kDevToolsObserver_Clone_Name = 1531902872;

  function DevToolsObserverPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(DevToolsObserver,
                                                   handleOrPtrInfo);
  }

  function DevToolsObserverAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        DevToolsObserver, associatedInterfacePtrInfo);
  }

  DevToolsObserverAssociatedPtr.prototype =
      Object.create(DevToolsObserverPtr.prototype);
  DevToolsObserverAssociatedPtr.prototype.constructor =
      DevToolsObserverAssociatedPtr;

  function DevToolsObserverProxy(receiver) {
    this.receiver_ = receiver;
  }
  DevToolsObserverPtr.prototype.onRawRequest = function() {
    return DevToolsObserverProxy.prototype.onRawRequest
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onRawRequest = function(devtoolRequestId, cookiesWithAccessResult, headers, clientSecurityState) {
    var params_ = new DevToolsObserver_OnRawRequest_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.cookiesWithAccessResult = cookiesWithAccessResult;
    params_.headers = headers;
    params_.clientSecurityState = clientSecurityState;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnRawRequest_Name,
        codec.align(DevToolsObserver_OnRawRequest_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnRawRequest_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onRawResponse = function() {
    return DevToolsObserverProxy.prototype.onRawResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onRawResponse = function(devtoolRequestId, cookiesWithAccessResult, headers, rawResponseHeaders, resourceAddressSpace) {
    var params_ = new DevToolsObserver_OnRawResponse_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.cookiesWithAccessResult = cookiesWithAccessResult;
    params_.headers = headers;
    params_.rawResponseHeaders = rawResponseHeaders;
    params_.resourceAddressSpace = resourceAddressSpace;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnRawResponse_Name,
        codec.align(DevToolsObserver_OnRawResponse_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnRawResponse_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onPrivateNetworkRequest = function() {
    return DevToolsObserverProxy.prototype.onPrivateNetworkRequest
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onPrivateNetworkRequest = function(devtoolRequestId, url, isWarning, resourceAddressSpace, clientSecurityState) {
    var params_ = new DevToolsObserver_OnPrivateNetworkRequest_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.url = url;
    params_.isWarning = isWarning;
    params_.resourceAddressSpace = resourceAddressSpace;
    params_.clientSecurityState = clientSecurityState;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnPrivateNetworkRequest_Name,
        codec.align(DevToolsObserver_OnPrivateNetworkRequest_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnPrivateNetworkRequest_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onCorsPreflightRequest = function() {
    return DevToolsObserverProxy.prototype.onCorsPreflightRequest
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onCorsPreflightRequest = function(devtoolRequestId, request, initiatorUrl, initiatorDevtoolRequestId) {
    var params_ = new DevToolsObserver_OnCorsPreflightRequest_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.request = request;
    params_.initiatorUrl = initiatorUrl;
    params_.initiatorDevtoolRequestId = initiatorDevtoolRequestId;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnCorsPreflightRequest_Name,
        codec.align(DevToolsObserver_OnCorsPreflightRequest_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnCorsPreflightRequest_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onCorsPreflightResponse = function() {
    return DevToolsObserverProxy.prototype.onCorsPreflightResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onCorsPreflightResponse = function(devtoolRequestId, url, head) {
    var params_ = new DevToolsObserver_OnCorsPreflightResponse_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.url = url;
    params_.head = head;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnCorsPreflightResponse_Name,
        codec.align(DevToolsObserver_OnCorsPreflightResponse_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnCorsPreflightResponse_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onCorsPreflightRequestCompleted = function() {
    return DevToolsObserverProxy.prototype.onCorsPreflightRequestCompleted
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onCorsPreflightRequestCompleted = function(devtoolRequestId, status) {
    var params_ = new DevToolsObserver_OnCorsPreflightRequestCompleted_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.status = status;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnCorsPreflightRequestCompleted_Name,
        codec.align(DevToolsObserver_OnCorsPreflightRequestCompleted_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnCorsPreflightRequestCompleted_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onTrustTokenOperationDone = function() {
    return DevToolsObserverProxy.prototype.onTrustTokenOperationDone
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onTrustTokenOperationDone = function(devtoolRequestId, result) {
    var params_ = new DevToolsObserver_OnTrustTokenOperationDone_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.result = result;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnTrustTokenOperationDone_Name,
        codec.align(DevToolsObserver_OnTrustTokenOperationDone_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnTrustTokenOperationDone_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onCorsError = function() {
    return DevToolsObserverProxy.prototype.onCorsError
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onCorsError = function(devtoolRequestId, initiatorOrigin, url, status) {
    var params_ = new DevToolsObserver_OnCorsError_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.initiatorOrigin = initiatorOrigin;
    params_.url = url;
    params_.status = status;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnCorsError_Name,
        codec.align(DevToolsObserver_OnCorsError_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnCorsError_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onSubresourceWebBundleMetadata = function() {
    return DevToolsObserverProxy.prototype.onSubresourceWebBundleMetadata
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onSubresourceWebBundleMetadata = function(devtoolRequestId, urls) {
    var params_ = new DevToolsObserver_OnSubresourceWebBundleMetadata_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.urls = urls;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnSubresourceWebBundleMetadata_Name,
        codec.align(DevToolsObserver_OnSubresourceWebBundleMetadata_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnSubresourceWebBundleMetadata_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onSubresourceWebBundleMetadataError = function() {
    return DevToolsObserverProxy.prototype.onSubresourceWebBundleMetadataError
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onSubresourceWebBundleMetadataError = function(devtoolRequestId, errorMessage) {
    var params_ = new DevToolsObserver_OnSubresourceWebBundleMetadataError_Params();
    params_.devtoolRequestId = devtoolRequestId;
    params_.errorMessage = errorMessage;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnSubresourceWebBundleMetadataError_Name,
        codec.align(DevToolsObserver_OnSubresourceWebBundleMetadataError_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnSubresourceWebBundleMetadataError_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onSubresourceWebBundleInnerResponse = function() {
    return DevToolsObserverProxy.prototype.onSubresourceWebBundleInnerResponse
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onSubresourceWebBundleInnerResponse = function(innerRequestDevtoolsId, url, bundleRequestDevtoolsId) {
    var params_ = new DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params();
    params_.innerRequestDevtoolsId = innerRequestDevtoolsId;
    params_.url = url;
    params_.bundleRequestDevtoolsId = bundleRequestDevtoolsId;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnSubresourceWebBundleInnerResponse_Name,
        codec.align(DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.onSubresourceWebBundleInnerResponseError = function() {
    return DevToolsObserverProxy.prototype.onSubresourceWebBundleInnerResponseError
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.onSubresourceWebBundleInnerResponseError = function(innerRequestDevtoolsId, url, errorMessage, bundleRequestDevtoolsId) {
    var params_ = new DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params();
    params_.innerRequestDevtoolsId = innerRequestDevtoolsId;
    params_.url = url;
    params_.errorMessage = errorMessage;
    params_.bundleRequestDevtoolsId = bundleRequestDevtoolsId;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_OnSubresourceWebBundleInnerResponseError_Name,
        codec.align(DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  DevToolsObserverPtr.prototype.clone = function() {
    return DevToolsObserverProxy.prototype.clone
        .apply(this.ptr.getProxy(), arguments);
  };

  DevToolsObserverProxy.prototype.clone = function(listener) {
    var params_ = new DevToolsObserver_Clone_Params();
    params_.listener = listener;
    var builder = new codec.MessageV0Builder(
        kDevToolsObserver_Clone_Name,
        codec.align(DevToolsObserver_Clone_Params.encodedSize));
    builder.encodeStruct(DevToolsObserver_Clone_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function DevToolsObserverStub(delegate) {
    this.delegate_ = delegate;
  }
  DevToolsObserverStub.prototype.onRawRequest = function(devtoolRequestId, cookiesWithAccessResult, headers, clientSecurityState) {
    return this.delegate_ && this.delegate_.onRawRequest && this.delegate_.onRawRequest(devtoolRequestId, cookiesWithAccessResult, headers, clientSecurityState);
  }
  DevToolsObserverStub.prototype.onRawResponse = function(devtoolRequestId, cookiesWithAccessResult, headers, rawResponseHeaders, resourceAddressSpace) {
    return this.delegate_ && this.delegate_.onRawResponse && this.delegate_.onRawResponse(devtoolRequestId, cookiesWithAccessResult, headers, rawResponseHeaders, resourceAddressSpace);
  }
  DevToolsObserverStub.prototype.onPrivateNetworkRequest = function(devtoolRequestId, url, isWarning, resourceAddressSpace, clientSecurityState) {
    return this.delegate_ && this.delegate_.onPrivateNetworkRequest && this.delegate_.onPrivateNetworkRequest(devtoolRequestId, url, isWarning, resourceAddressSpace, clientSecurityState);
  }
  DevToolsObserverStub.prototype.onCorsPreflightRequest = function(devtoolRequestId, request, initiatorUrl, initiatorDevtoolRequestId) {
    return this.delegate_ && this.delegate_.onCorsPreflightRequest && this.delegate_.onCorsPreflightRequest(devtoolRequestId, request, initiatorUrl, initiatorDevtoolRequestId);
  }
  DevToolsObserverStub.prototype.onCorsPreflightResponse = function(devtoolRequestId, url, head) {
    return this.delegate_ && this.delegate_.onCorsPreflightResponse && this.delegate_.onCorsPreflightResponse(devtoolRequestId, url, head);
  }
  DevToolsObserverStub.prototype.onCorsPreflightRequestCompleted = function(devtoolRequestId, status) {
    return this.delegate_ && this.delegate_.onCorsPreflightRequestCompleted && this.delegate_.onCorsPreflightRequestCompleted(devtoolRequestId, status);
  }
  DevToolsObserverStub.prototype.onTrustTokenOperationDone = function(devtoolRequestId, result) {
    return this.delegate_ && this.delegate_.onTrustTokenOperationDone && this.delegate_.onTrustTokenOperationDone(devtoolRequestId, result);
  }
  DevToolsObserverStub.prototype.onCorsError = function(devtoolRequestId, initiatorOrigin, url, status) {
    return this.delegate_ && this.delegate_.onCorsError && this.delegate_.onCorsError(devtoolRequestId, initiatorOrigin, url, status);
  }
  DevToolsObserverStub.prototype.onSubresourceWebBundleMetadata = function(devtoolRequestId, urls) {
    return this.delegate_ && this.delegate_.onSubresourceWebBundleMetadata && this.delegate_.onSubresourceWebBundleMetadata(devtoolRequestId, urls);
  }
  DevToolsObserverStub.prototype.onSubresourceWebBundleMetadataError = function(devtoolRequestId, errorMessage) {
    return this.delegate_ && this.delegate_.onSubresourceWebBundleMetadataError && this.delegate_.onSubresourceWebBundleMetadataError(devtoolRequestId, errorMessage);
  }
  DevToolsObserverStub.prototype.onSubresourceWebBundleInnerResponse = function(innerRequestDevtoolsId, url, bundleRequestDevtoolsId) {
    return this.delegate_ && this.delegate_.onSubresourceWebBundleInnerResponse && this.delegate_.onSubresourceWebBundleInnerResponse(innerRequestDevtoolsId, url, bundleRequestDevtoolsId);
  }
  DevToolsObserverStub.prototype.onSubresourceWebBundleInnerResponseError = function(innerRequestDevtoolsId, url, errorMessage, bundleRequestDevtoolsId) {
    return this.delegate_ && this.delegate_.onSubresourceWebBundleInnerResponseError && this.delegate_.onSubresourceWebBundleInnerResponseError(innerRequestDevtoolsId, url, errorMessage, bundleRequestDevtoolsId);
  }
  DevToolsObserverStub.prototype.clone = function(listener) {
    return this.delegate_ && this.delegate_.clone && this.delegate_.clone(listener);
  }

  DevToolsObserverStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kDevToolsObserver_OnRawRequest_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnRawRequest_Params);
      this.onRawRequest(params.devtoolRequestId, params.cookiesWithAccessResult, params.headers, params.clientSecurityState);
      return true;
    case kDevToolsObserver_OnRawResponse_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnRawResponse_Params);
      this.onRawResponse(params.devtoolRequestId, params.cookiesWithAccessResult, params.headers, params.rawResponseHeaders, params.resourceAddressSpace);
      return true;
    case kDevToolsObserver_OnPrivateNetworkRequest_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnPrivateNetworkRequest_Params);
      this.onPrivateNetworkRequest(params.devtoolRequestId, params.url, params.isWarning, params.resourceAddressSpace, params.clientSecurityState);
      return true;
    case kDevToolsObserver_OnCorsPreflightRequest_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnCorsPreflightRequest_Params);
      this.onCorsPreflightRequest(params.devtoolRequestId, params.request, params.initiatorUrl, params.initiatorDevtoolRequestId);
      return true;
    case kDevToolsObserver_OnCorsPreflightResponse_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnCorsPreflightResponse_Params);
      this.onCorsPreflightResponse(params.devtoolRequestId, params.url, params.head);
      return true;
    case kDevToolsObserver_OnCorsPreflightRequestCompleted_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnCorsPreflightRequestCompleted_Params);
      this.onCorsPreflightRequestCompleted(params.devtoolRequestId, params.status);
      return true;
    case kDevToolsObserver_OnTrustTokenOperationDone_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnTrustTokenOperationDone_Params);
      this.onTrustTokenOperationDone(params.devtoolRequestId, params.result);
      return true;
    case kDevToolsObserver_OnCorsError_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnCorsError_Params);
      this.onCorsError(params.devtoolRequestId, params.initiatorOrigin, params.url, params.status);
      return true;
    case kDevToolsObserver_OnSubresourceWebBundleMetadata_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnSubresourceWebBundleMetadata_Params);
      this.onSubresourceWebBundleMetadata(params.devtoolRequestId, params.urls);
      return true;
    case kDevToolsObserver_OnSubresourceWebBundleMetadataError_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnSubresourceWebBundleMetadataError_Params);
      this.onSubresourceWebBundleMetadataError(params.devtoolRequestId, params.errorMessage);
      return true;
    case kDevToolsObserver_OnSubresourceWebBundleInnerResponse_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params);
      this.onSubresourceWebBundleInnerResponse(params.innerRequestDevtoolsId, params.url, params.bundleRequestDevtoolsId);
      return true;
    case kDevToolsObserver_OnSubresourceWebBundleInnerResponseError_Name:
      var params = reader.decodeStruct(DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params);
      this.onSubresourceWebBundleInnerResponseError(params.innerRequestDevtoolsId, params.url, params.errorMessage, params.bundleRequestDevtoolsId);
      return true;
    case kDevToolsObserver_Clone_Name:
      var params = reader.decodeStruct(DevToolsObserver_Clone_Params);
      this.clone(params.listener);
      return true;
    default:
      return false;
    }
  };

  DevToolsObserverStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateDevToolsObserverRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kDevToolsObserver_OnRawRequest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnRawRequest_Params;
      break;
      case kDevToolsObserver_OnRawResponse_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnRawResponse_Params;
      break;
      case kDevToolsObserver_OnPrivateNetworkRequest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnPrivateNetworkRequest_Params;
      break;
      case kDevToolsObserver_OnCorsPreflightRequest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnCorsPreflightRequest_Params;
      break;
      case kDevToolsObserver_OnCorsPreflightResponse_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnCorsPreflightResponse_Params;
      break;
      case kDevToolsObserver_OnCorsPreflightRequestCompleted_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnCorsPreflightRequestCompleted_Params;
      break;
      case kDevToolsObserver_OnTrustTokenOperationDone_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnTrustTokenOperationDone_Params;
      break;
      case kDevToolsObserver_OnCorsError_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnCorsError_Params;
      break;
      case kDevToolsObserver_OnSubresourceWebBundleMetadata_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnSubresourceWebBundleMetadata_Params;
      break;
      case kDevToolsObserver_OnSubresourceWebBundleMetadataError_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnSubresourceWebBundleMetadataError_Params;
      break;
      case kDevToolsObserver_OnSubresourceWebBundleInnerResponse_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnSubresourceWebBundleInnerResponse_Params;
      break;
      case kDevToolsObserver_OnSubresourceWebBundleInnerResponseError_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_OnSubresourceWebBundleInnerResponseError_Params;
      break;
      case kDevToolsObserver_Clone_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = DevToolsObserver_Clone_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateDevToolsObserverResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var DevToolsObserver = {
    name: 'network.mojom.DevToolsObserver',
    kVersion: 0,
    ptrClass: DevToolsObserverPtr,
    proxyClass: DevToolsObserverProxy,
    stubClass: DevToolsObserverStub,
    validateRequest: validateDevToolsObserverRequest,
    validateResponse: null,
  };
  DevToolsObserverStub.prototype.validator = validateDevToolsObserverRequest;
  DevToolsObserverProxy.prototype.validator = null;
  exports.RequestPriority = RequestPriority;
  exports.SourceType = SourceType;
  exports.URLRequestReferrerPolicy = URLRequestReferrerPolicy;
  exports.URLLoaderCompletionStatus = URLLoaderCompletionStatus;
  exports.TrustedUrlRequestParams = TrustedUrlRequestParams;
  exports.WebBundleTokenParams = WebBundleTokenParams;
  exports.URLRequest = URLRequest;
  exports.URLRequestBody = URLRequestBody;
  exports.DataElementBytes = DataElementBytes;
  exports.DataElementFile = DataElementFile;
  exports.DataElementDataPipe = DataElementDataPipe;
  exports.DataElementChunkedDataPipe = DataElementChunkedDataPipe;
  exports.DataElement = DataElement;
  exports.DevToolsObserver = DevToolsObserver;
  exports.DevToolsObserverPtr = DevToolsObserverPtr;
  exports.DevToolsObserverAssociatedPtr = DevToolsObserverAssociatedPtr;
})();