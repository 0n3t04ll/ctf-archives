import numpy as np
import random

banner="""⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⠀⣀⣠⣤⣤⣶⣶⣿⣯⣤⣤⣤⣤⣤⣤⣤⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⠿⣿⣿⡿⠿⠛⠋⠉⠀⠐⠉⠉⠉⣀⣀⣤⣤⣤⣼⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡿⠋⠀⠉⠀⠚⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠉⠛⠛⠻⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠓⠂⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡼⠟⠃⠀⠀⠀⠀⢀⣠⣤⠤⢶⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣄⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⠊⠁⠀⠀⠀⠀⠀⠐⠚⠉⠁⠀⠀⠀⢸⣿⠀⠀⠀⠀⠀⠀⠤⣶⣶⣶⣶⣶⣶⣿⣿⣿⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠁⠀⣀⣤⣶⡾⠋⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣠⢴⣿⣴⡖⣹⣿⣿⣿⣷⠟⠁⠀⠀⠀⠀⠒⠶⠶⠟⠋⠀⠀⠀⠀⠀⠀⠀⠐⠲⢶⣶⣦⣤⣀⡀⠈⠙⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡧⠀⠀
⠀⠀⠀⣠⠖⠉⠔⠲⢤⠙⣿⣿⣿⣿⣿⣯⡤⠀⠀⠠⣀⣀⡀⠀⠀⠀⢀⣀⣀⣿⣷⣶⣶⣶⣤⣄⣀⠈⠛⠿⣿⣿⣷⣦⣄⣀⠉⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀
⠀⢠⠞⠁⠀⠀⠀⠀⠀⠈⠉⠉⠙⠛⠿⡟⠀⠀⠀⠐⠪⠽⠛⠛⠻⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣬⣛⢿⣿⣿⣿⣿⣶⣤⡙⢿⣿⣿⣿⣿⣿⣿⣿⡆⠀
⣰⣏⣠⣾⣠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣮⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀
⠸⠿⣿⣿⣷⣧⣾⣶⣿⣿⣿⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆
⠀⠀⠈⠻⢿⠟⠻⣿⡿⠿⠛⠛⠿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇
⠀⠀⠀⠀⠈⢇⠀⢸⠀⠀⠀⠀⠀⠈⠻⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇
⠀⠀⠀⠀⠀⠈⠳⣼⡇⠀⠀⠀⠀⠀⠀⢹⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁
⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠙⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡇⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠿⢿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠃⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⡿⠿⠛⠉⠉⠉⠉⠉⠀⠀⠉⠛⢿⣿⣿⣿⣿⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠀⢀⣾⣿⣿⣿⠟⠋⢁⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣿⠀⠀⠈⢿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀⣰⠃⠀⠀⠀⢀⣾⣿⣿⣫⣵⣶⣿⣿⣿⣿⣿⣿⣿⣿⣶⣄⠀⠀⠀⠀⠀⠀⠀⠈⠛⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⠇⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡿⣧⡀⣀⡴⠃⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣿⣿⠏⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡀⠙⠛⠋⠀⠀⠀⠀⠀⣸⣿⣿⠿⠛⣻⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠏⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀⢿⡟⠁⠀⠈⠁⠀⠀⠀⠀⣹⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡿⠃⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣳⣦⠄⠀⠀⠀⠀⠔⠛⢿⣿⣿⣿⣿⡿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢧⡀⠀⠀⠀⠀⠀⠐⠶⣿⡭⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⡿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠲⠤⣤⣤⠶⠒⠚⠉⠀⠀⠀⠀⠀⠀⠀⠔⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀                       Lion Prime Checker


"""


def patch(datas):
    mul=1
    for i in datas:
        try:
            mul*=i
            str(mul)
        except:
            return True
    if mul>= pow(2, 64):
        return False
    return True

def lion_prime(n):
    for _ in range(1337):
        if pow(random.randrange(1, n), n - 1, n) != 1:
            return False
    return True

def checker(datas):
    if not patch(datas) or len(datas)==0:
        exit('Error detected')
        
    x=np.array(datas[:60]).prod()
    
    if (pow(5, x)-pow(3, x))%(pow(2, x)+115)==0:
        print('NHNC{FAKE_FLAG}')
    
    else:
        print('The cutest lion doesn\'t like your logs...')

if __name__=='__main__':
    print(banner)
    logs=[]
    oops=random.randint(1, 2**64)
    print(f"Oops: {oops}")
    while True:
        p=int(input("Input your number to check if it's a Lion Prime: "))
        if p==0:
            break
        if lion_prime(p):
            print("This is a Lion Prime, prove me wrong !!!")
            cur=[]
            for i in range(1, 4):
                cur.append(int(input(f"Factor {i}: ")))
                if cur[i-1]==1:
                    print("No factor can be 1")
                    exit()

            if cur[0]*cur[1]*cur[2]==p:
                print("OK, I'll report the issue")
                logs.append(p^oops)
            else:
                print("WA / 0")
            
        else:
            print("This is not a Lion Prime QwQ...")
    
    if len(logs)!=len(set(logs)):
        print("Collision!!!")
        exit()
        
    checker(logs)
